/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IConfigurationsService {
    getConfigurations(): Observable<GetConfigurationsViewModel | null>;
    getConfigurationTemplatesList(countryUnitId: number, getUnapprovedTemplates: boolean): Observable<GetConfigurationTemplatesListViewModel | null>;
    getInputsList(countryUnitId: number): Observable<GetInputsListViewModel | null>;
    getEsgList(countryUnitId: number): Observable<GetEsgListViewModel | null>;
    getDataList(countryUnitId: number): Observable<GetDataListViewModel | null>;
}

@Injectable()
export class ConfigurationsService implements IConfigurationsService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:1234";
    }

    getConfigurations(): Observable<GetConfigurationsViewModel | null> {
        let url_ = this.baseUrl + "/api/Configurations/GetConfigurations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetConfigurations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetConfigurations(<any>response_);
                } catch (e) {
                    return <Observable<GetConfigurationsViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetConfigurationsViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetConfigurations(response: HttpResponseBase): Observable<GetConfigurationsViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetConfigurationsViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetConfigurationsViewModel | null>(<any>null);
    }

    getConfigurationTemplatesList(countryUnitId: number, getUnapprovedTemplates: boolean): Observable<GetConfigurationTemplatesListViewModel | null> {
        let url_ = this.baseUrl + "/api/Configurations/GetConfigurationTemplatesList/{countryUnitId}, {getUnapprovedTemplates}";
        if (countryUnitId === undefined || countryUnitId === null)
            throw new Error("The parameter 'countryUnitId' must be defined.");
        url_ = url_.replace("{countryUnitId}", encodeURIComponent("" + countryUnitId)); 
        if (getUnapprovedTemplates === undefined || getUnapprovedTemplates === null)
            throw new Error("The parameter 'getUnapprovedTemplates' must be defined.");
        url_ = url_.replace("{getUnapprovedTemplates}", encodeURIComponent("" + getUnapprovedTemplates)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetConfigurationTemplatesList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetConfigurationTemplatesList(<any>response_);
                } catch (e) {
                    return <Observable<GetConfigurationTemplatesListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetConfigurationTemplatesListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetConfigurationTemplatesList(response: HttpResponseBase): Observable<GetConfigurationTemplatesListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetConfigurationTemplatesListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetConfigurationTemplatesListViewModel | null>(<any>null);
    }

    getInputsList(countryUnitId: number): Observable<GetInputsListViewModel | null> {
        let url_ = this.baseUrl + "/api/Configurations/GetInputsList/{countryUnitId}";
        if (countryUnitId === undefined || countryUnitId === null)
            throw new Error("The parameter 'countryUnitId' must be defined.");
        url_ = url_.replace("{countryUnitId}", encodeURIComponent("" + countryUnitId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetInputsList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetInputsList(<any>response_);
                } catch (e) {
                    return <Observable<GetInputsListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetInputsListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetInputsList(response: HttpResponseBase): Observable<GetInputsListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetInputsListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetInputsListViewModel | null>(<any>null);
    }

    getEsgList(countryUnitId: number): Observable<GetEsgListViewModel | null> {
        let url_ = this.baseUrl + "/api/Configurations/GetEsgList/{countryUnitId}";
        if (countryUnitId === undefined || countryUnitId === null)
            throw new Error("The parameter 'countryUnitId' must be defined.");
        url_ = url_.replace("{countryUnitId}", encodeURIComponent("" + countryUnitId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEsgList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEsgList(<any>response_);
                } catch (e) {
                    return <Observable<GetEsgListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetEsgListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetEsgList(response: HttpResponseBase): Observable<GetEsgListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetEsgListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetEsgListViewModel | null>(<any>null);
    }

    getDataList(countryUnitId: number): Observable<GetDataListViewModel | null> {
        let url_ = this.baseUrl + "/api/Configurations/GetDataList/{countryUnitId}";
        if (countryUnitId === undefined || countryUnitId === null)
            throw new Error("The parameter 'countryUnitId' must be defined.");
        url_ = url_.replace("{countryUnitId}", encodeURIComponent("" + countryUnitId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDataList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDataList(<any>response_);
                } catch (e) {
                    return <Observable<GetDataListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetDataListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetDataList(response: HttpResponseBase): Observable<GetDataListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDataListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetDataListViewModel | null>(<any>null);
    }
}

export interface IAdminService {
    getUsers(): Observable<UserListViewModel | null>;
    getSaveUser(id: number): Observable<SaveUserViewModel | null>;
    saveUser(command: SaveUserCommand | null): Observable<number>;
}

@Injectable()
export class AdminService implements IAdminService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:1234";
    }

    getUsers(): Observable<UserListViewModel | null> {
        let url_ = this.baseUrl + "/api/Admin/GetUsers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUsers(<any>response_);
                } catch (e) {
                    return <Observable<UserListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetUsers(response: HttpResponseBase): Observable<UserListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserListViewModel | null>(<any>null);
    }

    getSaveUser(id: number): Observable<SaveUserViewModel | null> {
        let url_ = this.baseUrl + "/api/Admin/GetSaveUser/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSaveUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSaveUser(<any>response_);
                } catch (e) {
                    return <Observable<SaveUserViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<SaveUserViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetSaveUser(response: HttpResponseBase): Observable<SaveUserViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SaveUserViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SaveUserViewModel | null>(<any>null);
    }

    saveUser(command: SaveUserCommand | null): Observable<number> {
        let url_ = this.baseUrl + "/api/Admin/SaveUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveUser(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processSaveUser(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }
}

export interface IInputsService {
    getConfigurations(): Observable<GetConfigurationsViewModel | null>;
    getCreateConfigurationAi(runGroupId?: number | undefined): Observable<CreateConfigurationAiViewModel | null>;
    createConfigurationAi(command: CreateConfigurationAiCommand | null): Observable<void>;
    getCreateConfigurationAlv(runGroupId?: number | undefined): Observable<CreateConfigurationAlvViewModel | null>;
    createConfigurationAlv(command: CreateConfigurationAlvCommand | null): Observable<void>;
    getSelectionAi(assumptionSetId?: number | undefined, selectedProducts?: number[] | null | undefined, selectedRunTypes?: number[] | null | undefined): Observable<SelectionViewModel | null>;
    createSelectionAi(aiCommand: CreateSelectionAiCommand | null): Observable<number>;
    getSelectionAlv(assumptionSetId?: number | undefined, selectedProducts?: number[] | null | undefined, selectedRunTypes?: number[] | null | undefined): Observable<SelectionAlvViewModel | null>;
    createSelectionAlv(alvCommand: CreateSelectionAlvCommand | null): Observable<number>;
    getRunDefinition(modelParamId: number): Observable<RunDefinitionDto[] | null>;
    getKernelConfig(modelParamId: number): Observable<KernelConfigDto | null>;
    getCalculationExecution(modelParamId: number): Observable<CalculationExecutionDto[] | null>;
    getExpenses(modelParamId: number): Observable<ExpensesDto[] | null>;
    getEconomic(modelParamId: number): Observable<EconomicDto | null>;
    getInputFiles(): Observable<InputFileDto[] | null>;
    getSelectedInputFiles(modelParamIds: string): Observable<InputFileDto[] | null>;
    getInputFile(modelParamId: number): Observable<InputFileDto | null>;
    getCommonInputFiles(configSetId: number, productIds: string, runTypeIds: string): Observable<InputFileDto[] | null>;
    getKernelConfigAlv(modelParamId: number): Observable<KernelConfigAlvDto | null>;
    createInputs(inputFiles?: FileParameter[] | null | undefined): Observable<InputFileDto[] | null>;
    createKernelConfigAlv(command: CreateKernelConfigAlvCommand | null): Observable<KernelConfigAlvDto | null>;
    createKernelConfig(command: CreateKernelConfigCommand | null): Observable<KernelConfigDto | null>;
    createRunDefinition(command: CreateRunDefinitionCommand | null): Observable<RunDefinitionDto[] | null>;
    createCalculationExecution(command: CreateCalculationExecutionCommand | null): Observable<CalculationExecutionDto[] | null>;
    createEconomic(command: CreateEconomicCommand | null): Observable<EconomicDto | null>;
    createExpenses(command: CreateExpensesCommand | null): Observable<ExpensesDto[] | null>;
    getExistingConfigurations(inputType: string): Observable<{ [key: string] : string; } | null>;
    doesInputNameExist(inputType: string, inputName: string): Observable<boolean>;
    getDuplicateFile(file?: FileParameter | null | undefined): Observable<InputFileDto | null>;
}

@Injectable()
export class InputsService implements IInputsService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:1234";
    }

    getConfigurations(): Observable<GetConfigurationsViewModel | null> {
        let url_ = this.baseUrl + "/api/Inputs/GetConfigurations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetConfigurations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetConfigurations(<any>response_);
                } catch (e) {
                    return <Observable<GetConfigurationsViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetConfigurationsViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetConfigurations(response: HttpResponseBase): Observable<GetConfigurationsViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetConfigurationsViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetConfigurationsViewModel | null>(<any>null);
    }

    getCreateConfigurationAi(runGroupId?: number | undefined): Observable<CreateConfigurationAiViewModel | null> {
        let url_ = this.baseUrl + "/api/Inputs/GetCreateConfigurationAi?";
        if (runGroupId === null)
            throw new Error("The parameter 'runGroupId' cannot be null.");
        else if (runGroupId !== undefined)
            url_ += "runGroupId=" + encodeURIComponent("" + runGroupId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCreateConfigurationAi(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCreateConfigurationAi(<any>response_);
                } catch (e) {
                    return <Observable<CreateConfigurationAiViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateConfigurationAiViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetCreateConfigurationAi(response: HttpResponseBase): Observable<CreateConfigurationAiViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? CreateConfigurationAiViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateConfigurationAiViewModel | null>(<any>null);
    }

    createConfigurationAi(command: CreateConfigurationAiCommand | null): Observable<void> {
        let url_ = this.baseUrl + "/api/Inputs/CreateConfigurationAi";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateConfigurationAi(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateConfigurationAi(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateConfigurationAi(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    getCreateConfigurationAlv(runGroupId?: number | undefined): Observable<CreateConfigurationAlvViewModel | null> {
        let url_ = this.baseUrl + "/api/Inputs/GetCreateConfigurationAlv?";
        if (runGroupId === null)
            throw new Error("The parameter 'runGroupId' cannot be null.");
        else if (runGroupId !== undefined)
            url_ += "runGroupId=" + encodeURIComponent("" + runGroupId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCreateConfigurationAlv(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCreateConfigurationAlv(<any>response_);
                } catch (e) {
                    return <Observable<CreateConfigurationAlvViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateConfigurationAlvViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetCreateConfigurationAlv(response: HttpResponseBase): Observable<CreateConfigurationAlvViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? CreateConfigurationAlvViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateConfigurationAlvViewModel | null>(<any>null);
    }

    createConfigurationAlv(command: CreateConfigurationAlvCommand | null): Observable<void> {
        let url_ = this.baseUrl + "/api/Inputs/CreateConfigurationAlv";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateConfigurationAlv(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateConfigurationAlv(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateConfigurationAlv(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    getSelectionAi(assumptionSetId?: number | undefined, selectedProducts?: number[] | null | undefined, selectedRunTypes?: number[] | null | undefined): Observable<SelectionViewModel | null> {
        let url_ = this.baseUrl + "/api/Inputs/GetSelectionAi?";
        if (assumptionSetId === null)
            throw new Error("The parameter 'assumptionSetId' cannot be null.");
        else if (assumptionSetId !== undefined)
            url_ += "assumptionSetId=" + encodeURIComponent("" + assumptionSetId) + "&"; 
        if (selectedProducts !== undefined)
            selectedProducts && selectedProducts.forEach(item => { url_ += "selectedProducts=" + encodeURIComponent("" + item) + "&"; });
        if (selectedRunTypes !== undefined)
            selectedRunTypes && selectedRunTypes.forEach(item => { url_ += "selectedRunTypes=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSelectionAi(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSelectionAi(<any>response_);
                } catch (e) {
                    return <Observable<SelectionViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<SelectionViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetSelectionAi(response: HttpResponseBase): Observable<SelectionViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SelectionViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SelectionViewModel | null>(<any>null);
    }

    createSelectionAi(aiCommand: CreateSelectionAiCommand | null): Observable<number> {
        let url_ = this.baseUrl + "/api/Inputs/CreateSelectionAi";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(aiCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateSelectionAi(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateSelectionAi(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreateSelectionAi(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 !== undefined ? resultData201 : <any>null;
            return _observableOf(result201);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    getSelectionAlv(assumptionSetId?: number | undefined, selectedProducts?: number[] | null | undefined, selectedRunTypes?: number[] | null | undefined): Observable<SelectionAlvViewModel | null> {
        let url_ = this.baseUrl + "/api/Inputs/GetSelectionAlv?";
        if (assumptionSetId === null)
            throw new Error("The parameter 'assumptionSetId' cannot be null.");
        else if (assumptionSetId !== undefined)
            url_ += "assumptionSetId=" + encodeURIComponent("" + assumptionSetId) + "&"; 
        if (selectedProducts !== undefined)
            selectedProducts && selectedProducts.forEach(item => { url_ += "selectedProducts=" + encodeURIComponent("" + item) + "&"; });
        if (selectedRunTypes !== undefined)
            selectedRunTypes && selectedRunTypes.forEach(item => { url_ += "selectedRunTypes=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSelectionAlv(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSelectionAlv(<any>response_);
                } catch (e) {
                    return <Observable<SelectionAlvViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<SelectionAlvViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetSelectionAlv(response: HttpResponseBase): Observable<SelectionAlvViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SelectionAlvViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SelectionAlvViewModel | null>(<any>null);
    }

    createSelectionAlv(alvCommand: CreateSelectionAlvCommand | null): Observable<number> {
        let url_ = this.baseUrl + "/api/Inputs/CreateSelectionAlv";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(alvCommand);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateSelectionAlv(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateSelectionAlv(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreateSelectionAlv(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 !== undefined ? resultData201 : <any>null;
            return _observableOf(result201);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    getRunDefinition(modelParamId: number): Observable<RunDefinitionDto[] | null> {
        let url_ = this.baseUrl + "/api/Inputs/GetRunDefinition/{modelParamId}";
        if (modelParamId === undefined || modelParamId === null)
            throw new Error("The parameter 'modelParamId' must be defined.");
        url_ = url_.replace("{modelParamId}", encodeURIComponent("" + modelParamId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRunDefinition(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRunDefinition(<any>response_);
                } catch (e) {
                    return <Observable<RunDefinitionDto[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RunDefinitionDto[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetRunDefinition(response: HttpResponseBase): Observable<RunDefinitionDto[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RunDefinitionDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RunDefinitionDto[] | null>(<any>null);
    }

    getKernelConfig(modelParamId: number): Observable<KernelConfigDto | null> {
        let url_ = this.baseUrl + "/api/Inputs/GetKernelConfig/{modelParamId}";
        if (modelParamId === undefined || modelParamId === null)
            throw new Error("The parameter 'modelParamId' must be defined.");
        url_ = url_.replace("{modelParamId}", encodeURIComponent("" + modelParamId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetKernelConfig(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetKernelConfig(<any>response_);
                } catch (e) {
                    return <Observable<KernelConfigDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<KernelConfigDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetKernelConfig(response: HttpResponseBase): Observable<KernelConfigDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? KernelConfigDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<KernelConfigDto | null>(<any>null);
    }

    getCalculationExecution(modelParamId: number): Observable<CalculationExecutionDto[] | null> {
        let url_ = this.baseUrl + "/api/Inputs/GetCalculationExecution/{modelParamId}";
        if (modelParamId === undefined || modelParamId === null)
            throw new Error("The parameter 'modelParamId' must be defined.");
        url_ = url_.replace("{modelParamId}", encodeURIComponent("" + modelParamId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCalculationExecution(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCalculationExecution(<any>response_);
                } catch (e) {
                    return <Observable<CalculationExecutionDto[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<CalculationExecutionDto[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetCalculationExecution(response: HttpResponseBase): Observable<CalculationExecutionDto[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CalculationExecutionDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CalculationExecutionDto[] | null>(<any>null);
    }

    getExpenses(modelParamId: number): Observable<ExpensesDto[] | null> {
        let url_ = this.baseUrl + "/api/Inputs/GetExpenses/{modelParamId}";
        if (modelParamId === undefined || modelParamId === null)
            throw new Error("The parameter 'modelParamId' must be defined.");
        url_ = url_.replace("{modelParamId}", encodeURIComponent("" + modelParamId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetExpenses(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetExpenses(<any>response_);
                } catch (e) {
                    return <Observable<ExpensesDto[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExpensesDto[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetExpenses(response: HttpResponseBase): Observable<ExpensesDto[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ExpensesDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExpensesDto[] | null>(<any>null);
    }

    getEconomic(modelParamId: number): Observable<EconomicDto | null> {
        let url_ = this.baseUrl + "/api/Inputs/GetEconomic/{modelParamId}";
        if (modelParamId === undefined || modelParamId === null)
            throw new Error("The parameter 'modelParamId' must be defined.");
        url_ = url_.replace("{modelParamId}", encodeURIComponent("" + modelParamId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEconomic(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEconomic(<any>response_);
                } catch (e) {
                    return <Observable<EconomicDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<EconomicDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetEconomic(response: HttpResponseBase): Observable<EconomicDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EconomicDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EconomicDto | null>(<any>null);
    }

    getInputFiles(): Observable<InputFileDto[] | null> {
        let url_ = this.baseUrl + "/api/Inputs/GetInputFiles";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetInputFiles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetInputFiles(<any>response_);
                } catch (e) {
                    return <Observable<InputFileDto[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<InputFileDto[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetInputFiles(response: HttpResponseBase): Observable<InputFileDto[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(InputFileDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<InputFileDto[] | null>(<any>null);
    }

    getSelectedInputFiles(modelParamIds: string): Observable<InputFileDto[] | null> {
        let url_ = this.baseUrl + "/api/Inputs/GetSelectedInputFiles/{modelParamIds}";
        if (modelParamIds === undefined || modelParamIds === null)
            throw new Error("The parameter 'modelParamIds' must be defined.");
        url_ = url_.replace("{modelParamIds}", encodeURIComponent("" + modelParamIds)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSelectedInputFiles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSelectedInputFiles(<any>response_);
                } catch (e) {
                    return <Observable<InputFileDto[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<InputFileDto[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetSelectedInputFiles(response: HttpResponseBase): Observable<InputFileDto[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(InputFileDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<InputFileDto[] | null>(<any>null);
    }

    getInputFile(modelParamId: number): Observable<InputFileDto | null> {
        let url_ = this.baseUrl + "/api/Inputs/GetInputFile/{modelParamId}";
        if (modelParamId === undefined || modelParamId === null)
            throw new Error("The parameter 'modelParamId' must be defined.");
        url_ = url_.replace("{modelParamId}", encodeURIComponent("" + modelParamId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetInputFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetInputFile(<any>response_);
                } catch (e) {
                    return <Observable<InputFileDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<InputFileDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetInputFile(response: HttpResponseBase): Observable<InputFileDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? InputFileDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<InputFileDto | null>(<any>null);
    }

    getCommonInputFiles(configSetId: number, productIds: string, runTypeIds: string): Observable<InputFileDto[] | null> {
        let url_ = this.baseUrl + "/api/Inputs/GetCommonInputFiles/{configSetId}/{productIds}/{runTypeIds}";
        if (configSetId === undefined || configSetId === null)
            throw new Error("The parameter 'configSetId' must be defined.");
        url_ = url_.replace("{configSetId}", encodeURIComponent("" + configSetId)); 
        if (productIds === undefined || productIds === null)
            throw new Error("The parameter 'productIds' must be defined.");
        url_ = url_.replace("{productIds}", encodeURIComponent("" + productIds)); 
        if (runTypeIds === undefined || runTypeIds === null)
            throw new Error("The parameter 'runTypeIds' must be defined.");
        url_ = url_.replace("{runTypeIds}", encodeURIComponent("" + runTypeIds)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCommonInputFiles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCommonInputFiles(<any>response_);
                } catch (e) {
                    return <Observable<InputFileDto[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<InputFileDto[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetCommonInputFiles(response: HttpResponseBase): Observable<InputFileDto[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(InputFileDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<InputFileDto[] | null>(<any>null);
    }

    getKernelConfigAlv(modelParamId: number): Observable<KernelConfigAlvDto | null> {
        let url_ = this.baseUrl + "/api/Inputs/GetKernelConfigAlv/{modelParamId}";
        if (modelParamId === undefined || modelParamId === null)
            throw new Error("The parameter 'modelParamId' must be defined.");
        url_ = url_.replace("{modelParamId}", encodeURIComponent("" + modelParamId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetKernelConfigAlv(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetKernelConfigAlv(<any>response_);
                } catch (e) {
                    return <Observable<KernelConfigAlvDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<KernelConfigAlvDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetKernelConfigAlv(response: HttpResponseBase): Observable<KernelConfigAlvDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? KernelConfigAlvDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<KernelConfigAlvDto | null>(<any>null);
    }

    createInputs(inputFiles?: FileParameter[] | null | undefined): Observable<InputFileDto[] | null> {
        let url_ = this.baseUrl + "/api/Inputs/CreateInputs";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (inputFiles !== null && inputFiles !== undefined)
            inputFiles.forEach(item_ => content_.append("inputFiles", item_.data, item_.fileName ? item_.fileName : "inputFiles") );

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateInputs(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateInputs(<any>response_);
                } catch (e) {
                    return <Observable<InputFileDto[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<InputFileDto[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreateInputs(response: HttpResponseBase): Observable<InputFileDto[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData201 && resultData201.constructor === Array) {
                result201 = [] as any;
                for (let item of resultData201)
                    result201!.push(InputFileDto.fromJS(item));
            }
            return _observableOf(result201);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<InputFileDto[] | null>(<any>null);
    }

    createKernelConfigAlv(command: CreateKernelConfigAlvCommand | null): Observable<KernelConfigAlvDto | null> {
        let url_ = this.baseUrl + "/api/Inputs/CreateKernelConfigAlv";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateKernelConfigAlv(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateKernelConfigAlv(<any>response_);
                } catch (e) {
                    return <Observable<KernelConfigAlvDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<KernelConfigAlvDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreateKernelConfigAlv(response: HttpResponseBase): Observable<KernelConfigAlvDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 ? KernelConfigAlvDto.fromJS(resultData201) : <any>null;
            return _observableOf(result201);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<KernelConfigAlvDto | null>(<any>null);
    }

    createKernelConfig(command: CreateKernelConfigCommand | null): Observable<KernelConfigDto | null> {
        let url_ = this.baseUrl + "/api/Inputs/CreateKernelConfig";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateKernelConfig(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateKernelConfig(<any>response_);
                } catch (e) {
                    return <Observable<KernelConfigDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<KernelConfigDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreateKernelConfig(response: HttpResponseBase): Observable<KernelConfigDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 ? KernelConfigDto.fromJS(resultData201) : <any>null;
            return _observableOf(result201);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<KernelConfigDto | null>(<any>null);
    }

    createRunDefinition(command: CreateRunDefinitionCommand | null): Observable<RunDefinitionDto[] | null> {
        let url_ = this.baseUrl + "/api/Inputs/CreateRunDefinition";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateRunDefinition(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateRunDefinition(<any>response_);
                } catch (e) {
                    return <Observable<RunDefinitionDto[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RunDefinitionDto[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreateRunDefinition(response: HttpResponseBase): Observable<RunDefinitionDto[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData201 && resultData201.constructor === Array) {
                result201 = [] as any;
                for (let item of resultData201)
                    result201!.push(RunDefinitionDto.fromJS(item));
            }
            return _observableOf(result201);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RunDefinitionDto[] | null>(<any>null);
    }

    createCalculationExecution(command: CreateCalculationExecutionCommand | null): Observable<CalculationExecutionDto[] | null> {
        let url_ = this.baseUrl + "/api/Inputs/CreateCalculationExecution";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateCalculationExecution(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateCalculationExecution(<any>response_);
                } catch (e) {
                    return <Observable<CalculationExecutionDto[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<CalculationExecutionDto[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreateCalculationExecution(response: HttpResponseBase): Observable<CalculationExecutionDto[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData201 && resultData201.constructor === Array) {
                result201 = [] as any;
                for (let item of resultData201)
                    result201!.push(CalculationExecutionDto.fromJS(item));
            }
            return _observableOf(result201);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CalculationExecutionDto[] | null>(<any>null);
    }

    createEconomic(command: CreateEconomicCommand | null): Observable<EconomicDto | null> {
        let url_ = this.baseUrl + "/api/Inputs/CreateEconomic";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateEconomic(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateEconomic(<any>response_);
                } catch (e) {
                    return <Observable<EconomicDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<EconomicDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreateEconomic(response: HttpResponseBase): Observable<EconomicDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 ? EconomicDto.fromJS(resultData201) : <any>null;
            return _observableOf(result201);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EconomicDto | null>(<any>null);
    }

    createExpenses(command: CreateExpensesCommand | null): Observable<ExpensesDto[] | null> {
        let url_ = this.baseUrl + "/api/Inputs/CreateExpenses";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateExpenses(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateExpenses(<any>response_);
                } catch (e) {
                    return <Observable<ExpensesDto[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExpensesDto[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreateExpenses(response: HttpResponseBase): Observable<ExpensesDto[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData201 && resultData201.constructor === Array) {
                result201 = [] as any;
                for (let item of resultData201)
                    result201!.push(ExpensesDto.fromJS(item));
            }
            return _observableOf(result201);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExpensesDto[] | null>(<any>null);
    }

    getExistingConfigurations(inputType: string): Observable<{ [key: string] : string; } | null> {
        let url_ = this.baseUrl + "/api/Inputs/GetExistingConfigurations/{inputType}";
        if (inputType === undefined || inputType === null)
            throw new Error("The parameter 'inputType' must be defined.");
        url_ = url_.replace("{inputType}", encodeURIComponent("" + inputType)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetExistingConfigurations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetExistingConfigurations(<any>response_);
                } catch (e) {
                    return <Observable<{ [key: string] : string; } | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<{ [key: string] : string; } | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetExistingConfigurations(response: HttpResponseBase): Observable<{ [key: string] : string; } | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200![key] = resultData200[key];
                }
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<{ [key: string] : string; } | null>(<any>null);
    }

    doesInputNameExist(inputType: string, inputName: string): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Inputs/DoesInputNameExist/{inputType}/{inputName}";
        if (inputType === undefined || inputType === null)
            throw new Error("The parameter 'inputType' must be defined.");
        url_ = url_.replace("{inputType}", encodeURIComponent("" + inputType)); 
        if (inputName === undefined || inputName === null)
            throw new Error("The parameter 'inputName' must be defined.");
        url_ = url_.replace("{inputName}", encodeURIComponent("" + inputName)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDoesInputNameExist(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDoesInputNameExist(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processDoesInputNameExist(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }

    getDuplicateFile(file?: FileParameter | null | undefined): Observable<InputFileDto | null> {
        let url_ = this.baseUrl + "/api/Inputs/GetDuplicateFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDuplicateFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDuplicateFile(<any>response_);
                } catch (e) {
                    return <Observable<InputFileDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<InputFileDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetDuplicateFile(response: HttpResponseBase): Observable<InputFileDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? InputFileDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<InputFileDto | null>(<any>null);
    }
}

export interface IQueueService {
    getQueue(): Observable<QueueActionDto[] | null>;
    getHistoricQueue(valuationDate: string): Observable<HistoricQueueViewModel | null>;
    getStepsList(runId: number): Observable<GetStepsListViewModel | null>;
    archiveActions(runIds?: number[] | null | undefined): Observable<number>;
    refreshQueue(msg: QueueHubMessage | null): Observable<FileResponse | null>;
}

@Injectable()
export class QueueService implements IQueueService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:1234";
    }

    getQueue(): Observable<QueueActionDto[] | null> {
        let url_ = this.baseUrl + "/api/Queue/GetQueue";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetQueue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetQueue(<any>response_);
                } catch (e) {
                    return <Observable<QueueActionDto[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<QueueActionDto[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetQueue(response: HttpResponseBase): Observable<QueueActionDto[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(QueueActionDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<QueueActionDto[] | null>(<any>null);
    }

    getHistoricQueue(valuationDate: string): Observable<HistoricQueueViewModel | null> {
        let url_ = this.baseUrl + "/api/Queue/GetHistoricQueue/{valuationDate}";
        if (valuationDate === undefined || valuationDate === null)
            throw new Error("The parameter 'valuationDate' must be defined.");
        url_ = url_.replace("{valuationDate}", encodeURIComponent("" + valuationDate)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetHistoricQueue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetHistoricQueue(<any>response_);
                } catch (e) {
                    return <Observable<HistoricQueueViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<HistoricQueueViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetHistoricQueue(response: HttpResponseBase): Observable<HistoricQueueViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? HistoricQueueViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HistoricQueueViewModel | null>(<any>null);
    }

    getStepsList(runId: number): Observable<GetStepsListViewModel | null> {
        let url_ = this.baseUrl + "/api/Queue/GetStepsList/{runId}";
        if (runId === undefined || runId === null)
            throw new Error("The parameter 'runId' must be defined.");
        url_ = url_.replace("{runId}", encodeURIComponent("" + runId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStepsList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStepsList(<any>response_);
                } catch (e) {
                    return <Observable<GetStepsListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetStepsListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetStepsList(response: HttpResponseBase): Observable<GetStepsListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetStepsListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetStepsListViewModel | null>(<any>null);
    }

    archiveActions(runIds?: number[] | null | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/Queue/ArchiveActions?";
        if (runIds !== undefined)
            runIds && runIds.forEach(item => { url_ += "runIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processArchiveActions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processArchiveActions(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processArchiveActions(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    refreshQueue(msg: QueueHubMessage | null): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Queue/RefreshQueue";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(msg);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRefreshQueue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRefreshQueue(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processRefreshQueue(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

export interface IRungroupService {
    getRungroupsView(): Observable<RungroupsViewModel | null>;
    addRungroupView(rungroupId: number): Observable<AddRungroupViewModel | null>;
    rungroupProgressView(rungroupId: number): Observable<RungroupProgressViewModel | null>;
    submitRungroupProgress(form: string | null): Observable<RungroupProgressSubmitViewModel | null>;
    submitRungroupProgressConfirm(form: string | null): Observable<SubmitRungroupProgressConfirmViewModel | null>;
    deleteRungroup(rungroupId: number): Observable<DeleteRungroupViewModel | null>;
    approveRungroup(rungroupId: number): Observable<ApproveRungroupViewModel | null>;
    addNewRungroup(command: AddNewRungroupCommand | null): Observable<number>;
    getRunIds(valuationDate: string, rungroupId: number, actionId: number, sourceId: number): Observable<GetRunIdsViewModel | null>;
    getLoadIds(valuationDate: string, rungroupId: number, actionId: number, sourceId: number): Observable<GetLoadIdsViewModel | null>;
    getRunGroupOpeningAttributions(valuationDate: string, productIds: string): Observable<GetRunGroupOpeningAttributionsViewModel | null>;
    getSources(): Observable<GetSourcesViewModel | null>;
    getEsgTypes(): Observable<GetEsgTypesViewModel | null>;
    getMpgTypes(): Observable<GetMpgTypesViewModel | null>;
    getProducts(countryUnitId: number, productGroups: boolean): Observable<GetProductsViewModel | null>;
    getCountryRunTypes(countryUnitId: number): Observable<GetCountryRunTypesViewModel | null>;
    getAttributionRunTypes(): Observable<GetAttributionRunTypesViewModel | null>;
    getCountryUnits(): Observable<GetCountryUnitsViewModel | null>;
    getAllActions(): Observable<GetCountryActionsViewModel | null>;
    getCountryActions(countryUnitId: number): Observable<GetCountryActionsViewModel | null>;
    getDataActions(): Observable<GetDataActionsViewModel | null>;
    getEsgActions(): Observable<GetEsgActionsViewModel | null>;
    getActionProgress(rungroupId: number, actionId: number, otherId: string): Observable<GetActionProgressViewModel | null>;
}

@Injectable()
export class RungroupService implements IRungroupService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:1234";
    }

    getRungroupsView(): Observable<RungroupsViewModel | null> {
        let url_ = this.baseUrl + "/api/Rungroup/GetRungroupsView";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRungroupsView(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRungroupsView(<any>response_);
                } catch (e) {
                    return <Observable<RungroupsViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RungroupsViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetRungroupsView(response: HttpResponseBase): Observable<RungroupsViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RungroupsViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RungroupsViewModel | null>(<any>null);
    }

    addRungroupView(rungroupId: number): Observable<AddRungroupViewModel | null> {
        let url_ = this.baseUrl + "/api/Rungroup/AddRungroupView/{rungroupId}";
        if (rungroupId === undefined || rungroupId === null)
            throw new Error("The parameter 'rungroupId' must be defined.");
        url_ = url_.replace("{rungroupId}", encodeURIComponent("" + rungroupId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddRungroupView(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddRungroupView(<any>response_);
                } catch (e) {
                    return <Observable<AddRungroupViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<AddRungroupViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processAddRungroupView(response: HttpResponseBase): Observable<AddRungroupViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AddRungroupViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AddRungroupViewModel | null>(<any>null);
    }

    rungroupProgressView(rungroupId: number): Observable<RungroupProgressViewModel | null> {
        let url_ = this.baseUrl + "/api/Rungroup/RungroupProgressView/{rungroupId}";
        if (rungroupId === undefined || rungroupId === null)
            throw new Error("The parameter 'rungroupId' must be defined.");
        url_ = url_.replace("{rungroupId}", encodeURIComponent("" + rungroupId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRungroupProgressView(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRungroupProgressView(<any>response_);
                } catch (e) {
                    return <Observable<RungroupProgressViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RungroupProgressViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processRungroupProgressView(response: HttpResponseBase): Observable<RungroupProgressViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RungroupProgressViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RungroupProgressViewModel | null>(<any>null);
    }

    submitRungroupProgress(form: string | null): Observable<RungroupProgressSubmitViewModel | null> {
        let url_ = this.baseUrl + "/api/Rungroup/SubmitRungroupProgress";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(form);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSubmitRungroupProgress(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSubmitRungroupProgress(<any>response_);
                } catch (e) {
                    return <Observable<RungroupProgressSubmitViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RungroupProgressSubmitViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processSubmitRungroupProgress(response: HttpResponseBase): Observable<RungroupProgressSubmitViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RungroupProgressSubmitViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RungroupProgressSubmitViewModel | null>(<any>null);
    }

    submitRungroupProgressConfirm(form: string | null): Observable<SubmitRungroupProgressConfirmViewModel | null> {
        let url_ = this.baseUrl + "/api/Rungroup/SubmitRungroupProgressConfirm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(form);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSubmitRungroupProgressConfirm(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSubmitRungroupProgressConfirm(<any>response_);
                } catch (e) {
                    return <Observable<SubmitRungroupProgressConfirmViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<SubmitRungroupProgressConfirmViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processSubmitRungroupProgressConfirm(response: HttpResponseBase): Observable<SubmitRungroupProgressConfirmViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SubmitRungroupProgressConfirmViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SubmitRungroupProgressConfirmViewModel | null>(<any>null);
    }

    deleteRungroup(rungroupId: number): Observable<DeleteRungroupViewModel | null> {
        let url_ = this.baseUrl + "/api/Rungroup/DeleteRungroup/{rungroupId}";
        if (rungroupId === undefined || rungroupId === null)
            throw new Error("The parameter 'rungroupId' must be defined.");
        url_ = url_.replace("{rungroupId}", encodeURIComponent("" + rungroupId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteRungroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteRungroup(<any>response_);
                } catch (e) {
                    return <Observable<DeleteRungroupViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeleteRungroupViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteRungroup(response: HttpResponseBase): Observable<DeleteRungroupViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? DeleteRungroupViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeleteRungroupViewModel | null>(<any>null);
    }

    approveRungroup(rungroupId: number): Observable<ApproveRungroupViewModel | null> {
        let url_ = this.baseUrl + "/api/Rungroup/ApproveRungroup/{rungroupId}";
        if (rungroupId === undefined || rungroupId === null)
            throw new Error("The parameter 'rungroupId' must be defined.");
        url_ = url_.replace("{rungroupId}", encodeURIComponent("" + rungroupId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApproveRungroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApproveRungroup(<any>response_);
                } catch (e) {
                    return <Observable<ApproveRungroupViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApproveRungroupViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processApproveRungroup(response: HttpResponseBase): Observable<ApproveRungroupViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ApproveRungroupViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApproveRungroupViewModel | null>(<any>null);
    }

    addNewRungroup(command: AddNewRungroupCommand | null): Observable<number> {
        let url_ = this.baseUrl + "/api/Rungroup/AddNewRungroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddNewRungroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddNewRungroup(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processAddNewRungroup(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 !== undefined ? resultData201 : <any>null;
            return _observableOf(result201);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    getRunIds(valuationDate: string, rungroupId: number, actionId: number, sourceId: number): Observable<GetRunIdsViewModel | null> {
        let url_ = this.baseUrl + "/api/Rungroup/GetRunIds/{valuationDate}, {actionId}, {sourceId}?";
        if (valuationDate === undefined || valuationDate === null)
            throw new Error("The parameter 'valuationDate' must be defined.");
        url_ = url_.replace("{valuationDate}", encodeURIComponent("" + valuationDate)); 
        if (actionId === undefined || actionId === null)
            throw new Error("The parameter 'actionId' must be defined.");
        url_ = url_.replace("{actionId}", encodeURIComponent("" + actionId)); 
        if (sourceId === undefined || sourceId === null)
            throw new Error("The parameter 'sourceId' must be defined.");
        url_ = url_.replace("{sourceId}", encodeURIComponent("" + sourceId)); 
        if (rungroupId === undefined || rungroupId === null)
            throw new Error("The parameter 'rungroupId' must be defined and cannot be null.");
        else
            url_ += "rungroupId=" + encodeURIComponent("" + rungroupId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRunIds(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRunIds(<any>response_);
                } catch (e) {
                    return <Observable<GetRunIdsViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRunIdsViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetRunIds(response: HttpResponseBase): Observable<GetRunIdsViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetRunIdsViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRunIdsViewModel | null>(<any>null);
    }

    getLoadIds(valuationDate: string, rungroupId: number, actionId: number, sourceId: number): Observable<GetLoadIdsViewModel | null> {
        let url_ = this.baseUrl + "/api/Rungroup/GetLoadIds/{valuationDate}, {rungroupId}, {actionId}, {sourceId}";
        if (valuationDate === undefined || valuationDate === null)
            throw new Error("The parameter 'valuationDate' must be defined.");
        url_ = url_.replace("{valuationDate}", encodeURIComponent("" + valuationDate)); 
        if (rungroupId === undefined || rungroupId === null)
            throw new Error("The parameter 'rungroupId' must be defined.");
        url_ = url_.replace("{rungroupId}", encodeURIComponent("" + rungroupId)); 
        if (actionId === undefined || actionId === null)
            throw new Error("The parameter 'actionId' must be defined.");
        url_ = url_.replace("{actionId}", encodeURIComponent("" + actionId)); 
        if (sourceId === undefined || sourceId === null)
            throw new Error("The parameter 'sourceId' must be defined.");
        url_ = url_.replace("{sourceId}", encodeURIComponent("" + sourceId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLoadIds(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLoadIds(<any>response_);
                } catch (e) {
                    return <Observable<GetLoadIdsViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetLoadIdsViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetLoadIds(response: HttpResponseBase): Observable<GetLoadIdsViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLoadIdsViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetLoadIdsViewModel | null>(<any>null);
    }

    getRunGroupOpeningAttributions(valuationDate: string, productIds: string): Observable<GetRunGroupOpeningAttributionsViewModel | null> {
        let url_ = this.baseUrl + "/api/Rungroup/GetRunGroupOpeningAttributions/{valuationDate}, {productIds}";
        if (valuationDate === undefined || valuationDate === null)
            throw new Error("The parameter 'valuationDate' must be defined.");
        url_ = url_.replace("{valuationDate}", encodeURIComponent("" + valuationDate)); 
        if (productIds === undefined || productIds === null)
            throw new Error("The parameter 'productIds' must be defined.");
        url_ = url_.replace("{productIds}", encodeURIComponent("" + productIds)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRunGroupOpeningAttributions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRunGroupOpeningAttributions(<any>response_);
                } catch (e) {
                    return <Observable<GetRunGroupOpeningAttributionsViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRunGroupOpeningAttributionsViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetRunGroupOpeningAttributions(response: HttpResponseBase): Observable<GetRunGroupOpeningAttributionsViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetRunGroupOpeningAttributionsViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRunGroupOpeningAttributionsViewModel | null>(<any>null);
    }

    getSources(): Observable<GetSourcesViewModel | null> {
        let url_ = this.baseUrl + "/api/Rungroup/GetSources";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSources(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSources(<any>response_);
                } catch (e) {
                    return <Observable<GetSourcesViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetSourcesViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetSources(response: HttpResponseBase): Observable<GetSourcesViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetSourcesViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetSourcesViewModel | null>(<any>null);
    }

    getEsgTypes(): Observable<GetEsgTypesViewModel | null> {
        let url_ = this.baseUrl + "/api/Rungroup/GetEsgTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEsgTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEsgTypes(<any>response_);
                } catch (e) {
                    return <Observable<GetEsgTypesViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetEsgTypesViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetEsgTypes(response: HttpResponseBase): Observable<GetEsgTypesViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetEsgTypesViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetEsgTypesViewModel | null>(<any>null);
    }

    getMpgTypes(): Observable<GetMpgTypesViewModel | null> {
        let url_ = this.baseUrl + "/api/Rungroup/GetMpgTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMpgTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMpgTypes(<any>response_);
                } catch (e) {
                    return <Observable<GetMpgTypesViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetMpgTypesViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetMpgTypes(response: HttpResponseBase): Observable<GetMpgTypesViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetMpgTypesViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetMpgTypesViewModel | null>(<any>null);
    }

    getProducts(countryUnitId: number, productGroups: boolean): Observable<GetProductsViewModel | null> {
        let url_ = this.baseUrl + "/api/Rungroup/GetProducts/{countryUnitId}, {productGroups}";
        if (countryUnitId === undefined || countryUnitId === null)
            throw new Error("The parameter 'countryUnitId' must be defined.");
        url_ = url_.replace("{countryUnitId}", encodeURIComponent("" + countryUnitId)); 
        if (productGroups === undefined || productGroups === null)
            throw new Error("The parameter 'productGroups' must be defined.");
        url_ = url_.replace("{productGroups}", encodeURIComponent("" + productGroups)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProducts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProducts(<any>response_);
                } catch (e) {
                    return <Observable<GetProductsViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetProductsViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetProducts(response: HttpResponseBase): Observable<GetProductsViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProductsViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetProductsViewModel | null>(<any>null);
    }

    getCountryRunTypes(countryUnitId: number): Observable<GetCountryRunTypesViewModel | null> {
        let url_ = this.baseUrl + "/api/Rungroup/GetCountryRunTypes/{countryUnitId}";
        if (countryUnitId === undefined || countryUnitId === null)
            throw new Error("The parameter 'countryUnitId' must be defined.");
        url_ = url_.replace("{countryUnitId}", encodeURIComponent("" + countryUnitId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCountryRunTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCountryRunTypes(<any>response_);
                } catch (e) {
                    return <Observable<GetCountryRunTypesViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetCountryRunTypesViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetCountryRunTypes(response: HttpResponseBase): Observable<GetCountryRunTypesViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCountryRunTypesViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetCountryRunTypesViewModel | null>(<any>null);
    }

    getAttributionRunTypes(): Observable<GetAttributionRunTypesViewModel | null> {
        let url_ = this.baseUrl + "/api/Rungroup/GetAttributionRunTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAttributionRunTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAttributionRunTypes(<any>response_);
                } catch (e) {
                    return <Observable<GetAttributionRunTypesViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetAttributionRunTypesViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAttributionRunTypes(response: HttpResponseBase): Observable<GetAttributionRunTypesViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetAttributionRunTypesViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetAttributionRunTypesViewModel | null>(<any>null);
    }

    getCountryUnits(): Observable<GetCountryUnitsViewModel | null> {
        let url_ = this.baseUrl + "/api/Rungroup/GetCountryUnits";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCountryUnits(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCountryUnits(<any>response_);
                } catch (e) {
                    return <Observable<GetCountryUnitsViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetCountryUnitsViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetCountryUnits(response: HttpResponseBase): Observable<GetCountryUnitsViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCountryUnitsViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetCountryUnitsViewModel | null>(<any>null);
    }

    getAllActions(): Observable<GetCountryActionsViewModel | null> {
        let url_ = this.baseUrl + "/api/Rungroup/GetAllActions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllActions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllActions(<any>response_);
                } catch (e) {
                    return <Observable<GetCountryActionsViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetCountryActionsViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllActions(response: HttpResponseBase): Observable<GetCountryActionsViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCountryActionsViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetCountryActionsViewModel | null>(<any>null);
    }

    getCountryActions(countryUnitId: number): Observable<GetCountryActionsViewModel | null> {
        let url_ = this.baseUrl + "/api/Rungroup/GetCountryActions/{countryUnitId}";
        if (countryUnitId === undefined || countryUnitId === null)
            throw new Error("The parameter 'countryUnitId' must be defined.");
        url_ = url_.replace("{countryUnitId}", encodeURIComponent("" + countryUnitId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCountryActions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCountryActions(<any>response_);
                } catch (e) {
                    return <Observable<GetCountryActionsViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetCountryActionsViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetCountryActions(response: HttpResponseBase): Observable<GetCountryActionsViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCountryActionsViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetCountryActionsViewModel | null>(<any>null);
    }

    getDataActions(): Observable<GetDataActionsViewModel | null> {
        let url_ = this.baseUrl + "/api/Rungroup/GetDataActions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDataActions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDataActions(<any>response_);
                } catch (e) {
                    return <Observable<GetDataActionsViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetDataActionsViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetDataActions(response: HttpResponseBase): Observable<GetDataActionsViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDataActionsViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetDataActionsViewModel | null>(<any>null);
    }

    getEsgActions(): Observable<GetEsgActionsViewModel | null> {
        let url_ = this.baseUrl + "/api/Rungroup/GetEsgActions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEsgActions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEsgActions(<any>response_);
                } catch (e) {
                    return <Observable<GetEsgActionsViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetEsgActionsViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetEsgActions(response: HttpResponseBase): Observable<GetEsgActionsViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetEsgActionsViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetEsgActionsViewModel | null>(<any>null);
    }

    getActionProgress(rungroupId: number, actionId: number, otherId: string): Observable<GetActionProgressViewModel | null> {
        let url_ = this.baseUrl + "/api/Rungroup/GetActionProgress/{rungroupId}, {actionId}, {otherId}";
        if (rungroupId === undefined || rungroupId === null)
            throw new Error("The parameter 'rungroupId' must be defined.");
        url_ = url_.replace("{rungroupId}", encodeURIComponent("" + rungroupId)); 
        if (actionId === undefined || actionId === null)
            throw new Error("The parameter 'actionId' must be defined.");
        url_ = url_.replace("{actionId}", encodeURIComponent("" + actionId)); 
        if (otherId === undefined || otherId === null)
            throw new Error("The parameter 'otherId' must be defined.");
        url_ = url_.replace("{otherId}", encodeURIComponent("" + otherId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetActionProgress(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetActionProgress(<any>response_);
                } catch (e) {
                    return <Observable<GetActionProgressViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetActionProgressViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetActionProgress(response: HttpResponseBase): Observable<GetActionProgressViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetActionProgressViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetActionProgressViewModel | null>(<any>null);
    }
}

export class GetConfigurationsViewModel implements IGetConfigurationsViewModel {
    configurations?: ConfigurationsDto[] | undefined;

    constructor(data?: IGetConfigurationsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["configurations"] && data["configurations"].constructor === Array) {
                this.configurations = [] as any;
                for (let item of data["configurations"])
                    this.configurations!.push(ConfigurationsDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetConfigurationsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetConfigurationsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.configurations && this.configurations.constructor === Array) {
            data["configurations"] = [];
            for (let item of this.configurations)
                data["configurations"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetConfigurationsViewModel {
    configurations?: ConfigurationsDto[] | undefined;
}

export class ConfigurationsDto implements IConfigurationsDto {
    runGroupId!: number;
    countryUnitId!: number;
    runGroupName?: string | undefined;
    countryUnitName?: string | undefined;
    actionTypeName?: string | undefined;
    configurationSetName?: string | undefined;
    configurationConfigSetId!: number;
    dataSetName?: string | undefined;
    dataConfigSetId!: number;
    esgSetName?: string | undefined;
    esgConfigSetId!: number;

    constructor(data?: IConfigurationsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.runGroupId = data["runGroupId"];
            this.countryUnitId = data["countryUnitId"];
            this.runGroupName = data["runGroupName"];
            this.countryUnitName = data["countryUnitName"];
            this.actionTypeName = data["actionTypeName"];
            this.configurationSetName = data["configurationSetName"];
            this.configurationConfigSetId = data["configurationConfigSetId"];
            this.dataSetName = data["dataSetName"];
            this.dataConfigSetId = data["dataConfigSetId"];
            this.esgSetName = data["esgSetName"];
            this.esgConfigSetId = data["esgConfigSetId"];
        }
    }

    static fromJS(data: any): ConfigurationsDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConfigurationsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["runGroupId"] = this.runGroupId;
        data["countryUnitId"] = this.countryUnitId;
        data["runGroupName"] = this.runGroupName;
        data["countryUnitName"] = this.countryUnitName;
        data["actionTypeName"] = this.actionTypeName;
        data["configurationSetName"] = this.configurationSetName;
        data["configurationConfigSetId"] = this.configurationConfigSetId;
        data["dataSetName"] = this.dataSetName;
        data["dataConfigSetId"] = this.dataConfigSetId;
        data["esgSetName"] = this.esgSetName;
        data["esgConfigSetId"] = this.esgConfigSetId;
        return data; 
    }
}

export interface IConfigurationsDto {
    runGroupId: number;
    countryUnitId: number;
    runGroupName?: string | undefined;
    countryUnitName?: string | undefined;
    actionTypeName?: string | undefined;
    configurationSetName?: string | undefined;
    configurationConfigSetId: number;
    dataSetName?: string | undefined;
    dataConfigSetId: number;
    esgSetName?: string | undefined;
    esgConfigSetId: number;
}

export class GetConfigurationTemplatesListViewModel implements IGetConfigurationTemplatesListViewModel {
    json?: string | undefined;

    constructor(data?: IGetConfigurationTemplatesListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.json = data["json"];
        }
    }

    static fromJS(data: any): GetConfigurationTemplatesListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetConfigurationTemplatesListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["json"] = this.json;
        return data; 
    }
}

export interface IGetConfigurationTemplatesListViewModel {
    json?: string | undefined;
}

export class GetInputsListViewModel implements IGetInputsListViewModel {
    json?: string | undefined;

    constructor(data?: IGetInputsListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.json = data["json"];
        }
    }

    static fromJS(data: any): GetInputsListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetInputsListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["json"] = this.json;
        return data; 
    }
}

export interface IGetInputsListViewModel {
    json?: string | undefined;
}

export class GetEsgListViewModel implements IGetEsgListViewModel {
    json?: string | undefined;

    constructor(data?: IGetEsgListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.json = data["json"];
        }
    }

    static fromJS(data: any): GetEsgListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetEsgListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["json"] = this.json;
        return data; 
    }
}

export interface IGetEsgListViewModel {
    json?: string | undefined;
}

export class GetDataListViewModel implements IGetDataListViewModel {
    json?: string | undefined;

    constructor(data?: IGetDataListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.json = data["json"];
        }
    }

    static fromJS(data: any): GetDataListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetDataListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["json"] = this.json;
        return data; 
    }
}

export interface IGetDataListViewModel {
    json?: string | undefined;
}

export class UserListViewModel implements IUserListViewModel {
    users?: UserDto[] | undefined;

    constructor(data?: IUserListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["users"] && data["users"].constructor === Array) {
                this.users = [] as any;
                for (let item of data["users"])
                    this.users!.push(UserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.users && this.users.constructor === Array) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserListViewModel {
    users?: UserDto[] | undefined;
}

export class UserDto implements IUserDto {
    id!: number;
    name?: string | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
    team?: string | undefined;
    userRoles?: UserRoleDto[] | undefined;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.lastName = data["lastName"];
            this.firstName = data["firstName"];
            this.team = data["team"];
            if (data["userRoles"] && data["userRoles"].constructor === Array) {
                this.userRoles = [] as any;
                for (let item of data["userRoles"])
                    this.userRoles!.push(UserRoleDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["lastName"] = this.lastName;
        data["firstName"] = this.firstName;
        data["team"] = this.team;
        if (this.userRoles && this.userRoles.constructor === Array) {
            data["userRoles"] = [];
            for (let item of this.userRoles)
                data["userRoles"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserDto {
    id: number;
    name?: string | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
    team?: string | undefined;
    userRoles?: UserRoleDto[] | undefined;
}

export class UserRoleDto implements IUserRoleDto {
    roleId!: number;
    roleName?: string | undefined;
    roleDescription?: string | undefined;

    constructor(data?: IUserRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roleId = data["roleId"];
            this.roleName = data["roleName"];
            this.roleDescription = data["roleDescription"];
        }
    }

    static fromJS(data: any): UserRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["roleName"] = this.roleName;
        data["roleDescription"] = this.roleDescription;
        return data; 
    }
}

export interface IUserRoleDto {
    roleId: number;
    roleName?: string | undefined;
    roleDescription?: string | undefined;
}

export class SaveUserViewModel implements ISaveUserViewModel {
    user?: UserDto | undefined;
    users?: UserDto[] | undefined;
    roles?: RoleDto[] | undefined;
    teams?: string[] | undefined;

    constructor(data?: ISaveUserViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.user = data["user"] ? UserDto.fromJS(data["user"]) : <any>undefined;
            if (data["users"] && data["users"].constructor === Array) {
                this.users = [] as any;
                for (let item of data["users"])
                    this.users!.push(UserDto.fromJS(item));
            }
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [] as any;
                for (let item of data["roles"])
                    this.roles!.push(RoleDto.fromJS(item));
            }
            if (data["teams"] && data["teams"].constructor === Array) {
                this.teams = [] as any;
                for (let item of data["teams"])
                    this.teams!.push(item);
            }
        }
    }

    static fromJS(data: any): SaveUserViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SaveUserViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        if (this.users && this.users.constructor === Array) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        if (this.teams && this.teams.constructor === Array) {
            data["teams"] = [];
            for (let item of this.teams)
                data["teams"].push(item);
        }
        return data; 
    }
}

export interface ISaveUserViewModel {
    user?: UserDto | undefined;
    users?: UserDto[] | undefined;
    roles?: RoleDto[] | undefined;
    teams?: string[] | undefined;
}

export class RoleDto implements IRoleDto {
    id!: number;
    name?: string | undefined;
    description?: string | undefined;

    constructor(data?: IRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): RoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        return data; 
    }
}

export interface IRoleDto {
    id: number;
    name?: string | undefined;
    description?: string | undefined;
}

export class SaveUserCommand implements ISaveUserCommand {
    id?: number | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    team?: string | undefined;
    roles?: Role[] | undefined;

    constructor(data?: ISaveUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.name = data["name"];
            this.team = data["team"];
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [] as any;
                for (let item of data["roles"])
                    this.roles!.push(Role.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SaveUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SaveUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["name"] = this.name;
        data["team"] = this.team;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISaveUserCommand {
    id?: number | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    team?: string | undefined;
    roles?: Role[] | undefined;
}

export class Role implements IRole {
    id!: number;
    name?: string | undefined;
    description?: string | undefined;
    userRoles?: UserRole[] | undefined;

    constructor(data?: IRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.description = data["description"];
            if (data["userRoles"] && data["userRoles"].constructor === Array) {
                this.userRoles = [] as any;
                for (let item of data["userRoles"])
                    this.userRoles!.push(UserRole.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Role {
        data = typeof data === 'object' ? data : {};
        let result = new Role();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        if (this.userRoles && this.userRoles.constructor === Array) {
            data["userRoles"] = [];
            for (let item of this.userRoles)
                data["userRoles"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRole {
    id: number;
    name?: string | undefined;
    description?: string | undefined;
    userRoles?: UserRole[] | undefined;
}

export class UserRole implements IUserRole {
    id!: number;
    userId!: number;
    user?: User | undefined;
    roleId!: number;
    role?: Role | undefined;

    constructor(data?: IUserRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.userId = data["userId"];
            this.user = data["user"] ? User.fromJS(data["user"]) : <any>undefined;
            this.roleId = data["roleId"];
            this.role = data["role"] ? Role.fromJS(data["role"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserRole {
        data = typeof data === 'object' ? data : {};
        let result = new UserRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["roleId"] = this.roleId;
        data["role"] = this.role ? this.role.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IUserRole {
    id: number;
    userId: number;
    user?: User | undefined;
    roleId: number;
    role?: Role | undefined;
}

export abstract class MarshalByRefObject implements IMarshalByRefObject {

    constructor(data?: IMarshalByRefObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): MarshalByRefObject {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'MarshalByRefObject' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IMarshalByRefObject {
}

export class User extends MarshalByRefObject implements IUser {
    id!: number;
    name?: string | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
    team?: string | undefined;
    userRoles?: UserRole[] | undefined;
    originalIdentity?: WindowsIdentity | undefined;
    authenticationType?: string | undefined;
    isAuthenticated!: boolean;

    constructor(data?: IUser) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.lastName = data["lastName"];
            this.firstName = data["firstName"];
            this.team = data["team"];
            if (data["userRoles"] && data["userRoles"].constructor === Array) {
                this.userRoles = [] as any;
                for (let item of data["userRoles"])
                    this.userRoles!.push(UserRole.fromJS(item));
            }
            this.originalIdentity = data["originalIdentity"] ? WindowsIdentity.fromJS(data["originalIdentity"]) : <any>undefined;
            this.authenticationType = data["authenticationType"];
            this.isAuthenticated = data["isAuthenticated"];
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["lastName"] = this.lastName;
        data["firstName"] = this.firstName;
        data["team"] = this.team;
        if (this.userRoles && this.userRoles.constructor === Array) {
            data["userRoles"] = [];
            for (let item of this.userRoles)
                data["userRoles"].push(item.toJSON());
        }
        data["originalIdentity"] = this.originalIdentity ? this.originalIdentity.toJSON() : <any>undefined;
        data["authenticationType"] = this.authenticationType;
        data["isAuthenticated"] = this.isAuthenticated;
        super.toJSON(data);
        return data; 
    }
}

export interface IUser extends IMarshalByRefObject {
    id: number;
    name?: string | undefined;
    lastName?: string | undefined;
    firstName?: string | undefined;
    team?: string | undefined;
    userRoles?: UserRole[] | undefined;
    originalIdentity?: WindowsIdentity | undefined;
    authenticationType?: string | undefined;
    isAuthenticated: boolean;
}

export class ClaimsIdentity implements IClaimsIdentity {
    authenticationType?: string | undefined;
    isAuthenticated!: boolean;
    actor?: ClaimsIdentity | undefined;
    bootstrapContext?: any | undefined;
    claims?: Claim[] | undefined;
    label?: string | undefined;
    name?: string | undefined;
    nameClaimType?: string | undefined;
    roleClaimType?: string | undefined;

    constructor(data?: IClaimsIdentity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.authenticationType = data["authenticationType"];
            this.isAuthenticated = data["isAuthenticated"];
            this.actor = data["actor"] ? ClaimsIdentity.fromJS(data["actor"]) : <any>undefined;
            this.bootstrapContext = data["bootstrapContext"];
            if (data["claims"] && data["claims"].constructor === Array) {
                this.claims = [] as any;
                for (let item of data["claims"])
                    this.claims!.push(Claim.fromJS(item));
            }
            this.label = data["label"];
            this.name = data["name"];
            this.nameClaimType = data["nameClaimType"];
            this.roleClaimType = data["roleClaimType"];
        }
    }

    static fromJS(data: any): ClaimsIdentity {
        data = typeof data === 'object' ? data : {};
        let result = new ClaimsIdentity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authenticationType"] = this.authenticationType;
        data["isAuthenticated"] = this.isAuthenticated;
        data["actor"] = this.actor ? this.actor.toJSON() : <any>undefined;
        data["bootstrapContext"] = this.bootstrapContext;
        if (this.claims && this.claims.constructor === Array) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        data["label"] = this.label;
        data["name"] = this.name;
        data["nameClaimType"] = this.nameClaimType;
        data["roleClaimType"] = this.roleClaimType;
        return data; 
    }
}

export interface IClaimsIdentity {
    authenticationType?: string | undefined;
    isAuthenticated: boolean;
    actor?: ClaimsIdentity | undefined;
    bootstrapContext?: any | undefined;
    claims?: Claim[] | undefined;
    label?: string | undefined;
    name?: string | undefined;
    nameClaimType?: string | undefined;
    roleClaimType?: string | undefined;
}

export class WindowsIdentity extends ClaimsIdentity implements IWindowsIdentity {
    authenticationType?: string | undefined;
    impersonationLevel!: TokenImpersonationLevel;
    isAuthenticated!: boolean;
    isGuest!: boolean;
    isSystem!: boolean;
    isAnonymous!: boolean;
    name?: string | undefined;
    owner?: SecurityIdentifier | undefined;
    user?: SecurityIdentifier | undefined;
    groups?: IdentityReference[] | undefined;
    accessToken?: SafeAccessTokenHandle | undefined;
    token!: IntPtr;
    userClaims?: Claim[] | undefined;
    deviceClaims?: Claim[] | undefined;
    claims?: Claim[] | undefined;

    constructor(data?: IWindowsIdentity) {
        super(data);
        if (!data) {
            this.token = new IntPtr();
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.authenticationType = data["authenticationType"];
            this.impersonationLevel = data["impersonationLevel"];
            this.isAuthenticated = data["isAuthenticated"];
            this.isGuest = data["isGuest"];
            this.isSystem = data["isSystem"];
            this.isAnonymous = data["isAnonymous"];
            this.name = data["name"];
            this.owner = data["owner"] ? SecurityIdentifier.fromJS(data["owner"]) : <any>undefined;
            this.user = data["user"] ? SecurityIdentifier.fromJS(data["user"]) : <any>undefined;
            if (data["groups"] && data["groups"].constructor === Array) {
                this.groups = [] as any;
                for (let item of data["groups"])
                    this.groups!.push(IdentityReference.fromJS(item));
            }
            this.accessToken = data["accessToken"] ? SafeAccessTokenHandle.fromJS(data["accessToken"]) : <any>undefined;
            this.token = data["token"] ? IntPtr.fromJS(data["token"]) : new IntPtr();
            if (data["userClaims"] && data["userClaims"].constructor === Array) {
                this.userClaims = [] as any;
                for (let item of data["userClaims"])
                    this.userClaims!.push(Claim.fromJS(item));
            }
            if (data["deviceClaims"] && data["deviceClaims"].constructor === Array) {
                this.deviceClaims = [] as any;
                for (let item of data["deviceClaims"])
                    this.deviceClaims!.push(Claim.fromJS(item));
            }
            if (data["claims"] && data["claims"].constructor === Array) {
                this.claims = [] as any;
                for (let item of data["claims"])
                    this.claims!.push(Claim.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WindowsIdentity {
        data = typeof data === 'object' ? data : {};
        let result = new WindowsIdentity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authenticationType"] = this.authenticationType;
        data["impersonationLevel"] = this.impersonationLevel;
        data["isAuthenticated"] = this.isAuthenticated;
        data["isGuest"] = this.isGuest;
        data["isSystem"] = this.isSystem;
        data["isAnonymous"] = this.isAnonymous;
        data["name"] = this.name;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        if (this.groups && this.groups.constructor === Array) {
            data["groups"] = [];
            for (let item of this.groups)
                data["groups"].push(item.toJSON());
        }
        data["accessToken"] = this.accessToken ? this.accessToken.toJSON() : <any>undefined;
        data["token"] = this.token ? this.token.toJSON() : <any>undefined;
        if (this.userClaims && this.userClaims.constructor === Array) {
            data["userClaims"] = [];
            for (let item of this.userClaims)
                data["userClaims"].push(item.toJSON());
        }
        if (this.deviceClaims && this.deviceClaims.constructor === Array) {
            data["deviceClaims"] = [];
            for (let item of this.deviceClaims)
                data["deviceClaims"].push(item.toJSON());
        }
        if (this.claims && this.claims.constructor === Array) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IWindowsIdentity extends IClaimsIdentity {
    authenticationType?: string | undefined;
    impersonationLevel: TokenImpersonationLevel;
    isAuthenticated: boolean;
    isGuest: boolean;
    isSystem: boolean;
    isAnonymous: boolean;
    name?: string | undefined;
    owner?: SecurityIdentifier | undefined;
    user?: SecurityIdentifier | undefined;
    groups?: IdentityReference[] | undefined;
    accessToken?: SafeAccessTokenHandle | undefined;
    token: IntPtr;
    userClaims?: Claim[] | undefined;
    deviceClaims?: Claim[] | undefined;
    claims?: Claim[] | undefined;
}

export enum TokenImpersonationLevel {
    None = 0, 
    Anonymous = 1, 
    Identification = 2, 
    Impersonation = 3, 
    Delegation = 4, 
}

export abstract class IdentityReference implements IIdentityReference {

    constructor(data?: IIdentityReference) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): IdentityReference {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IdentityReference' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IIdentityReference {
}

export class SecurityIdentifier extends IdentityReference implements ISecurityIdentifier {
    binaryLength!: number;
    accountDomainSid?: SecurityIdentifier | undefined;
    value?: string | undefined;

    constructor(data?: ISecurityIdentifier) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.binaryLength = data["binaryLength"];
            this.accountDomainSid = data["accountDomainSid"] ? SecurityIdentifier.fromJS(data["accountDomainSid"]) : <any>undefined;
            this.value = data["value"];
        }
    }

    static fromJS(data: any): SecurityIdentifier {
        data = typeof data === 'object' ? data : {};
        let result = new SecurityIdentifier();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["binaryLength"] = this.binaryLength;
        data["accountDomainSid"] = this.accountDomainSid ? this.accountDomainSid.toJSON() : <any>undefined;
        data["value"] = this.value;
        super.toJSON(data);
        return data; 
    }
}

export interface ISecurityIdentifier extends IIdentityReference {
    binaryLength: number;
    accountDomainSid?: SecurityIdentifier | undefined;
    value?: string | undefined;
}

export abstract class CriticalFinalizerObject implements ICriticalFinalizerObject {

    constructor(data?: ICriticalFinalizerObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): CriticalFinalizerObject {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'CriticalFinalizerObject' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface ICriticalFinalizerObject {
}

export abstract class SafeHandle extends CriticalFinalizerObject implements ISafeHandle {
    isClosed!: boolean;

    constructor(data?: ISafeHandle) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.isClosed = data["isClosed"];
        }
    }

    static fromJS(data: any): SafeHandle {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'SafeHandle' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isClosed"] = this.isClosed;
        super.toJSON(data);
        return data; 
    }
}

export interface ISafeHandle extends ICriticalFinalizerObject {
    isClosed: boolean;
}

export class SafeAccessTokenHandle extends SafeHandle implements ISafeAccessTokenHandle {
    isInvalid!: boolean;

    constructor(data?: ISafeAccessTokenHandle) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.isInvalid = data["isInvalid"];
        }
    }

    static fromJS(data: any): SafeAccessTokenHandle {
        data = typeof data === 'object' ? data : {};
        let result = new SafeAccessTokenHandle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isInvalid"] = this.isInvalid;
        super.toJSON(data);
        return data; 
    }
}

export interface ISafeAccessTokenHandle extends ISafeHandle {
    isInvalid: boolean;
}

export abstract class ValueType implements IValueType {

    constructor(data?: IValueType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): ValueType {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ValueType' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IValueType {
}

export class IntPtr extends ValueType implements IIntPtr {

    constructor(data?: IIntPtr) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): IntPtr {
        data = typeof data === 'object' ? data : {};
        let result = new IntPtr();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IIntPtr extends IValueType {
}

export class Claim implements IClaim {
    issuer?: string | undefined;
    originalIssuer?: string | undefined;
    properties?: { [key: string] : string; } | undefined;
    subject?: ClaimsIdentity | undefined;
    type?: string | undefined;
    value?: string | undefined;
    valueType?: string | undefined;

    constructor(data?: IClaim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.issuer = data["issuer"];
            this.originalIssuer = data["originalIssuer"];
            if (data["properties"]) {
                this.properties = {} as any;
                for (let key in data["properties"]) {
                    if (data["properties"].hasOwnProperty(key))
                        this.properties![key] = data["properties"][key];
                }
            }
            this.subject = data["subject"] ? ClaimsIdentity.fromJS(data["subject"]) : <any>undefined;
            this.type = data["type"];
            this.value = data["value"];
            this.valueType = data["valueType"];
        }
    }

    static fromJS(data: any): Claim {
        data = typeof data === 'object' ? data : {};
        let result = new Claim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["issuer"] = this.issuer;
        data["originalIssuer"] = this.originalIssuer;
        if (this.properties) {
            data["properties"] = {};
            for (let key in this.properties) {
                if (this.properties.hasOwnProperty(key))
                    data["properties"][key] = this.properties[key];
            }
        }
        data["subject"] = this.subject ? this.subject.toJSON() : <any>undefined;
        data["type"] = this.type;
        data["value"] = this.value;
        data["valueType"] = this.valueType;
        return data; 
    }
}

export interface IClaim {
    issuer?: string | undefined;
    originalIssuer?: string | undefined;
    properties?: { [key: string] : string; } | undefined;
    subject?: ClaimsIdentity | undefined;
    type?: string | undefined;
    value?: string | undefined;
    valueType?: string | undefined;
}

export class CreateConfigurationAiViewModel implements ICreateConfigurationAiViewModel {
    inputSetId!: number;
    products?: ProductInputDto[] | undefined;
    runTypes?: RunTypeInputDto[] | undefined;
    kernelConfigViewModel?: KernelConfigViewModel | undefined;

    constructor(data?: ICreateConfigurationAiViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.inputSetId = data["inputSetId"];
            if (data["products"] && data["products"].constructor === Array) {
                this.products = [] as any;
                for (let item of data["products"])
                    this.products!.push(ProductInputDto.fromJS(item));
            }
            if (data["runTypes"] && data["runTypes"].constructor === Array) {
                this.runTypes = [] as any;
                for (let item of data["runTypes"])
                    this.runTypes!.push(RunTypeInputDto.fromJS(item));
            }
            this.kernelConfigViewModel = data["kernelConfigViewModel"] ? KernelConfigViewModel.fromJS(data["kernelConfigViewModel"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateConfigurationAiViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CreateConfigurationAiViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["inputSetId"] = this.inputSetId;
        if (this.products && this.products.constructor === Array) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        if (this.runTypes && this.runTypes.constructor === Array) {
            data["runTypes"] = [];
            for (let item of this.runTypes)
                data["runTypes"].push(item.toJSON());
        }
        data["kernelConfigViewModel"] = this.kernelConfigViewModel ? this.kernelConfigViewModel.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateConfigurationAiViewModel {
    inputSetId: number;
    products?: ProductInputDto[] | undefined;
    runTypes?: RunTypeInputDto[] | undefined;
    kernelConfigViewModel?: KernelConfigViewModel | undefined;
}

export class ProductInputDto implements IProductInputDto {
    id!: number;
    name?: string | undefined;

    constructor(data?: IProductInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): ProductInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IProductInputDto {
    id: number;
    name?: string | undefined;
}

export class RunTypeInputDto implements IRunTypeInputDto {
    id!: number;
    name?: string | undefined;

    constructor(data?: IRunTypeInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): RunTypeInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new RunTypeInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IRunTypeInputDto {
    id: number;
    name?: string | undefined;
}

export class KernelConfigViewModel implements IKernelConfigViewModel {
    optionsNumberOfProcessors?: string[] | undefined;
    optionsResultLevel?: string[] | undefined;
    optionsResultSubLevel?: string[] | undefined;
    optionsResultOutputTarget?: string[] | undefined;
    optionsParallelProcessingType?: string[] | undefined;
    optionsParallelSettingsCalculationMethod?: string[] | undefined;
    optionsResultsProjections?: string[] | undefined;
    optionsRunBufferVariables?: string[] | undefined;
    optionsEsgSource?: string[] | undefined;
    optionsEsgDatabaseServer?: string[] | undefined;
    optionsRunInParallel!: boolean;

    constructor(data?: IKernelConfigViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["optionsNumberOfProcessors"] && data["optionsNumberOfProcessors"].constructor === Array) {
                this.optionsNumberOfProcessors = [] as any;
                for (let item of data["optionsNumberOfProcessors"])
                    this.optionsNumberOfProcessors!.push(item);
            }
            if (data["optionsResultLevel"] && data["optionsResultLevel"].constructor === Array) {
                this.optionsResultLevel = [] as any;
                for (let item of data["optionsResultLevel"])
                    this.optionsResultLevel!.push(item);
            }
            if (data["optionsResultSubLevel"] && data["optionsResultSubLevel"].constructor === Array) {
                this.optionsResultSubLevel = [] as any;
                for (let item of data["optionsResultSubLevel"])
                    this.optionsResultSubLevel!.push(item);
            }
            if (data["optionsResultOutputTarget"] && data["optionsResultOutputTarget"].constructor === Array) {
                this.optionsResultOutputTarget = [] as any;
                for (let item of data["optionsResultOutputTarget"])
                    this.optionsResultOutputTarget!.push(item);
            }
            if (data["optionsParallelProcessingType"] && data["optionsParallelProcessingType"].constructor === Array) {
                this.optionsParallelProcessingType = [] as any;
                for (let item of data["optionsParallelProcessingType"])
                    this.optionsParallelProcessingType!.push(item);
            }
            if (data["optionsParallelSettingsCalculationMethod"] && data["optionsParallelSettingsCalculationMethod"].constructor === Array) {
                this.optionsParallelSettingsCalculationMethod = [] as any;
                for (let item of data["optionsParallelSettingsCalculationMethod"])
                    this.optionsParallelSettingsCalculationMethod!.push(item);
            }
            if (data["optionsResultsProjections"] && data["optionsResultsProjections"].constructor === Array) {
                this.optionsResultsProjections = [] as any;
                for (let item of data["optionsResultsProjections"])
                    this.optionsResultsProjections!.push(item);
            }
            if (data["optionsRunBufferVariables"] && data["optionsRunBufferVariables"].constructor === Array) {
                this.optionsRunBufferVariables = [] as any;
                for (let item of data["optionsRunBufferVariables"])
                    this.optionsRunBufferVariables!.push(item);
            }
            if (data["optionsEsgSource"] && data["optionsEsgSource"].constructor === Array) {
                this.optionsEsgSource = [] as any;
                for (let item of data["optionsEsgSource"])
                    this.optionsEsgSource!.push(item);
            }
            if (data["optionsEsgDatabaseServer"] && data["optionsEsgDatabaseServer"].constructor === Array) {
                this.optionsEsgDatabaseServer = [] as any;
                for (let item of data["optionsEsgDatabaseServer"])
                    this.optionsEsgDatabaseServer!.push(item);
            }
            this.optionsRunInParallel = data["optionsRunInParallel"];
        }
    }

    static fromJS(data: any): KernelConfigViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new KernelConfigViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.optionsNumberOfProcessors && this.optionsNumberOfProcessors.constructor === Array) {
            data["optionsNumberOfProcessors"] = [];
            for (let item of this.optionsNumberOfProcessors)
                data["optionsNumberOfProcessors"].push(item);
        }
        if (this.optionsResultLevel && this.optionsResultLevel.constructor === Array) {
            data["optionsResultLevel"] = [];
            for (let item of this.optionsResultLevel)
                data["optionsResultLevel"].push(item);
        }
        if (this.optionsResultSubLevel && this.optionsResultSubLevel.constructor === Array) {
            data["optionsResultSubLevel"] = [];
            for (let item of this.optionsResultSubLevel)
                data["optionsResultSubLevel"].push(item);
        }
        if (this.optionsResultOutputTarget && this.optionsResultOutputTarget.constructor === Array) {
            data["optionsResultOutputTarget"] = [];
            for (let item of this.optionsResultOutputTarget)
                data["optionsResultOutputTarget"].push(item);
        }
        if (this.optionsParallelProcessingType && this.optionsParallelProcessingType.constructor === Array) {
            data["optionsParallelProcessingType"] = [];
            for (let item of this.optionsParallelProcessingType)
                data["optionsParallelProcessingType"].push(item);
        }
        if (this.optionsParallelSettingsCalculationMethod && this.optionsParallelSettingsCalculationMethod.constructor === Array) {
            data["optionsParallelSettingsCalculationMethod"] = [];
            for (let item of this.optionsParallelSettingsCalculationMethod)
                data["optionsParallelSettingsCalculationMethod"].push(item);
        }
        if (this.optionsResultsProjections && this.optionsResultsProjections.constructor === Array) {
            data["optionsResultsProjections"] = [];
            for (let item of this.optionsResultsProjections)
                data["optionsResultsProjections"].push(item);
        }
        if (this.optionsRunBufferVariables && this.optionsRunBufferVariables.constructor === Array) {
            data["optionsRunBufferVariables"] = [];
            for (let item of this.optionsRunBufferVariables)
                data["optionsRunBufferVariables"].push(item);
        }
        if (this.optionsEsgSource && this.optionsEsgSource.constructor === Array) {
            data["optionsEsgSource"] = [];
            for (let item of this.optionsEsgSource)
                data["optionsEsgSource"].push(item);
        }
        if (this.optionsEsgDatabaseServer && this.optionsEsgDatabaseServer.constructor === Array) {
            data["optionsEsgDatabaseServer"] = [];
            for (let item of this.optionsEsgDatabaseServer)
                data["optionsEsgDatabaseServer"].push(item);
        }
        data["optionsRunInParallel"] = this.optionsRunInParallel;
        return data; 
    }
}

export interface IKernelConfigViewModel {
    optionsNumberOfProcessors?: string[] | undefined;
    optionsResultLevel?: string[] | undefined;
    optionsResultSubLevel?: string[] | undefined;
    optionsResultOutputTarget?: string[] | undefined;
    optionsParallelProcessingType?: string[] | undefined;
    optionsParallelSettingsCalculationMethod?: string[] | undefined;
    optionsResultsProjections?: string[] | undefined;
    optionsRunBufferVariables?: string[] | undefined;
    optionsEsgSource?: string[] | undefined;
    optionsEsgDatabaseServer?: string[] | undefined;
    optionsRunInParallel: boolean;
}

export class CreateConfigurationAiCommand implements ICreateConfigurationAiCommand {
    runGroupId!: number;
    inputSetId!: number;

    constructor(data?: ICreateConfigurationAiCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.runGroupId = data["runGroupId"];
            this.inputSetId = data["inputSetId"];
        }
    }

    static fromJS(data: any): CreateConfigurationAiCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateConfigurationAiCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["runGroupId"] = this.runGroupId;
        data["inputSetId"] = this.inputSetId;
        return data; 
    }
}

export interface ICreateConfigurationAiCommand {
    runGroupId: number;
    inputSetId: number;
}

export class CreateConfigurationAlvViewModel implements ICreateConfigurationAlvViewModel {
    inputsConfigSetId!: number;
    products?: ProductInputDto[] | undefined;
    runTypes?: RunTypeInputDto[] | undefined;
    assetGroups?: AssetGroupInputDto[] | undefined;
    inputsViewModel?: InputsViewModel | undefined;
    kernelConfigAlvViewModel?: KernelConfigAlvViewModel | undefined;

    constructor(data?: ICreateConfigurationAlvViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.inputsConfigSetId = data["inputsConfigSetId"];
            if (data["products"] && data["products"].constructor === Array) {
                this.products = [] as any;
                for (let item of data["products"])
                    this.products!.push(ProductInputDto.fromJS(item));
            }
            if (data["runTypes"] && data["runTypes"].constructor === Array) {
                this.runTypes = [] as any;
                for (let item of data["runTypes"])
                    this.runTypes!.push(RunTypeInputDto.fromJS(item));
            }
            if (data["assetGroups"] && data["assetGroups"].constructor === Array) {
                this.assetGroups = [] as any;
                for (let item of data["assetGroups"])
                    this.assetGroups!.push(AssetGroupInputDto.fromJS(item));
            }
            this.inputsViewModel = data["inputsViewModel"] ? InputsViewModel.fromJS(data["inputsViewModel"]) : <any>undefined;
            this.kernelConfigAlvViewModel = data["kernelConfigAlvViewModel"] ? KernelConfigAlvViewModel.fromJS(data["kernelConfigAlvViewModel"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateConfigurationAlvViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CreateConfigurationAlvViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["inputsConfigSetId"] = this.inputsConfigSetId;
        if (this.products && this.products.constructor === Array) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        if (this.runTypes && this.runTypes.constructor === Array) {
            data["runTypes"] = [];
            for (let item of this.runTypes)
                data["runTypes"].push(item.toJSON());
        }
        if (this.assetGroups && this.assetGroups.constructor === Array) {
            data["assetGroups"] = [];
            for (let item of this.assetGroups)
                data["assetGroups"].push(item.toJSON());
        }
        data["inputsViewModel"] = this.inputsViewModel ? this.inputsViewModel.toJSON() : <any>undefined;
        data["kernelConfigAlvViewModel"] = this.kernelConfigAlvViewModel ? this.kernelConfigAlvViewModel.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateConfigurationAlvViewModel {
    inputsConfigSetId: number;
    products?: ProductInputDto[] | undefined;
    runTypes?: RunTypeInputDto[] | undefined;
    assetGroups?: AssetGroupInputDto[] | undefined;
    inputsViewModel?: InputsViewModel | undefined;
    kernelConfigAlvViewModel?: KernelConfigAlvViewModel | undefined;
}

export class AssetGroupInputDto implements IAssetGroupInputDto {
    id!: number;
    name?: string | undefined;

    constructor(data?: IAssetGroupInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): AssetGroupInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssetGroupInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IAssetGroupInputDto {
    id: number;
    name?: string | undefined;
}

export class InputsViewModel implements IInputsViewModel {
    configSetEntries?: ConfigModelParamInputDto[] | undefined;
    inputNames?: { [key: string] : string; } | undefined;
    inputFiles?: InputFileDto[] | undefined;

    constructor(data?: IInputsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["configSetEntries"] && data["configSetEntries"].constructor === Array) {
                this.configSetEntries = [] as any;
                for (let item of data["configSetEntries"])
                    this.configSetEntries!.push(ConfigModelParamInputDto.fromJS(item));
            }
            if (data["inputNames"]) {
                this.inputNames = {} as any;
                for (let key in data["inputNames"]) {
                    if (data["inputNames"].hasOwnProperty(key))
                        this.inputNames![key] = data["inputNames"][key];
                }
            }
            if (data["inputFiles"] && data["inputFiles"].constructor === Array) {
                this.inputFiles = [] as any;
                for (let item of data["inputFiles"])
                    this.inputFiles!.push(InputFileDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InputsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new InputsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.configSetEntries && this.configSetEntries.constructor === Array) {
            data["configSetEntries"] = [];
            for (let item of this.configSetEntries)
                data["configSetEntries"].push(item.toJSON());
        }
        if (this.inputNames) {
            data["inputNames"] = {};
            for (let key in this.inputNames) {
                if (this.inputNames.hasOwnProperty(key))
                    data["inputNames"][key] = this.inputNames[key];
            }
        }
        if (this.inputFiles && this.inputFiles.constructor === Array) {
            data["inputFiles"] = [];
            for (let item of this.inputFiles)
                data["inputFiles"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IInputsViewModel {
    configSetEntries?: ConfigModelParamInputDto[] | undefined;
    inputNames?: { [key: string] : string; } | undefined;
    inputFiles?: InputFileDto[] | undefined;
}

export class ConfigModelParamInputDto implements IConfigModelParamInputDto {
    configSetId!: number;
    modelParamId!: number;
    fileName?: string | undefined;
    hashCode!: number;
    productId!: number;
    assetGroupId!: number;
    runTypeId!: number;
    inputNameId!: number;
    inputName?: string | undefined;
    isBaseEntry!: boolean;
    isDeleted!: boolean;
    isNew!: boolean;

    constructor(data?: IConfigModelParamInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.configSetId = data["configSetId"];
            this.modelParamId = data["modelParamId"];
            this.fileName = data["fileName"];
            this.hashCode = data["hashCode"];
            this.productId = data["productId"];
            this.assetGroupId = data["assetGroupId"];
            this.runTypeId = data["runTypeId"];
            this.inputNameId = data["inputNameId"];
            this.inputName = data["inputName"];
            this.isBaseEntry = data["isBaseEntry"];
            this.isDeleted = data["isDeleted"];
            this.isNew = data["isNew"];
        }
    }

    static fromJS(data: any): ConfigModelParamInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConfigModelParamInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["configSetId"] = this.configSetId;
        data["modelParamId"] = this.modelParamId;
        data["fileName"] = this.fileName;
        data["hashCode"] = this.hashCode;
        data["productId"] = this.productId;
        data["assetGroupId"] = this.assetGroupId;
        data["runTypeId"] = this.runTypeId;
        data["inputNameId"] = this.inputNameId;
        data["inputName"] = this.inputName;
        data["isBaseEntry"] = this.isBaseEntry;
        data["isDeleted"] = this.isDeleted;
        data["isNew"] = this.isNew;
        return data; 
    }
}

export interface IConfigModelParamInputDto {
    configSetId: number;
    modelParamId: number;
    fileName?: string | undefined;
    hashCode: number;
    productId: number;
    assetGroupId: number;
    runTypeId: number;
    inputNameId: number;
    inputName?: string | undefined;
    isBaseEntry: boolean;
    isDeleted: boolean;
    isNew: boolean;
}

export class InputFileDto implements IInputFileDto {
    modelParamId!: number;
    blob?: string | undefined;
    fileName?: string | undefined;
    blobStructure?: string | undefined;

    constructor(data?: IInputFileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.modelParamId = data["modelParamId"];
            this.blob = data["blob"];
            this.fileName = data["fileName"];
            this.blobStructure = data["blobStructure"];
        }
    }

    static fromJS(data: any): InputFileDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputFileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelParamId"] = this.modelParamId;
        data["blob"] = this.blob;
        data["fileName"] = this.fileName;
        data["blobStructure"] = this.blobStructure;
        return data; 
    }
}

export interface IInputFileDto {
    modelParamId: number;
    blob?: string | undefined;
    fileName?: string | undefined;
    blobStructure?: string | undefined;
}

export class KernelConfigAlvViewModel implements IKernelConfigAlvViewModel {
    configSetEntries?: ConfigKernelConfigAlvDto[] | undefined;
    optionsNumberOfProcessors?: string[] | undefined;
    optionsGlobalConfigProjectionType?: string[] | undefined;
    optionsGlobalResultOutputTarget?: string[] | undefined;
    optionsGlobalConfigParallelProcessingSplitType?: string[] | undefined;
    optionsGlobalConfigParallelProcessingProcessorsCalcMethod?: string[] | undefined;
    optionsGlobalResultProjectionOutputMonths?: string[] | undefined;
    optionsResultLevel?: string[] | undefined;
    optionsResultSubLevel?: string[] | undefined;
    optionsResultOutputVariables?: string[] | undefined;
    optionsRunInParallel!: boolean;

    constructor(data?: IKernelConfigAlvViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["configSetEntries"] && data["configSetEntries"].constructor === Array) {
                this.configSetEntries = [] as any;
                for (let item of data["configSetEntries"])
                    this.configSetEntries!.push(ConfigKernelConfigAlvDto.fromJS(item));
            }
            if (data["optionsNumberOfProcessors"] && data["optionsNumberOfProcessors"].constructor === Array) {
                this.optionsNumberOfProcessors = [] as any;
                for (let item of data["optionsNumberOfProcessors"])
                    this.optionsNumberOfProcessors!.push(item);
            }
            if (data["optionsGlobalConfigProjectionType"] && data["optionsGlobalConfigProjectionType"].constructor === Array) {
                this.optionsGlobalConfigProjectionType = [] as any;
                for (let item of data["optionsGlobalConfigProjectionType"])
                    this.optionsGlobalConfigProjectionType!.push(item);
            }
            if (data["optionsGlobalResultOutputTarget"] && data["optionsGlobalResultOutputTarget"].constructor === Array) {
                this.optionsGlobalResultOutputTarget = [] as any;
                for (let item of data["optionsGlobalResultOutputTarget"])
                    this.optionsGlobalResultOutputTarget!.push(item);
            }
            if (data["optionsGlobalConfigParallelProcessingSplitType"] && data["optionsGlobalConfigParallelProcessingSplitType"].constructor === Array) {
                this.optionsGlobalConfigParallelProcessingSplitType = [] as any;
                for (let item of data["optionsGlobalConfigParallelProcessingSplitType"])
                    this.optionsGlobalConfigParallelProcessingSplitType!.push(item);
            }
            if (data["optionsGlobalConfigParallelProcessingProcessorsCalcMethod"] && data["optionsGlobalConfigParallelProcessingProcessorsCalcMethod"].constructor === Array) {
                this.optionsGlobalConfigParallelProcessingProcessorsCalcMethod = [] as any;
                for (let item of data["optionsGlobalConfigParallelProcessingProcessorsCalcMethod"])
                    this.optionsGlobalConfigParallelProcessingProcessorsCalcMethod!.push(item);
            }
            if (data["optionsGlobalResultProjectionOutputMonths"] && data["optionsGlobalResultProjectionOutputMonths"].constructor === Array) {
                this.optionsGlobalResultProjectionOutputMonths = [] as any;
                for (let item of data["optionsGlobalResultProjectionOutputMonths"])
                    this.optionsGlobalResultProjectionOutputMonths!.push(item);
            }
            if (data["optionsResultLevel"] && data["optionsResultLevel"].constructor === Array) {
                this.optionsResultLevel = [] as any;
                for (let item of data["optionsResultLevel"])
                    this.optionsResultLevel!.push(item);
            }
            if (data["optionsResultSubLevel"] && data["optionsResultSubLevel"].constructor === Array) {
                this.optionsResultSubLevel = [] as any;
                for (let item of data["optionsResultSubLevel"])
                    this.optionsResultSubLevel!.push(item);
            }
            if (data["optionsResultOutputVariables"] && data["optionsResultOutputVariables"].constructor === Array) {
                this.optionsResultOutputVariables = [] as any;
                for (let item of data["optionsResultOutputVariables"])
                    this.optionsResultOutputVariables!.push(item);
            }
            this.optionsRunInParallel = data["optionsRunInParallel"];
        }
    }

    static fromJS(data: any): KernelConfigAlvViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new KernelConfigAlvViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.configSetEntries && this.configSetEntries.constructor === Array) {
            data["configSetEntries"] = [];
            for (let item of this.configSetEntries)
                data["configSetEntries"].push(item.toJSON());
        }
        if (this.optionsNumberOfProcessors && this.optionsNumberOfProcessors.constructor === Array) {
            data["optionsNumberOfProcessors"] = [];
            for (let item of this.optionsNumberOfProcessors)
                data["optionsNumberOfProcessors"].push(item);
        }
        if (this.optionsGlobalConfigProjectionType && this.optionsGlobalConfigProjectionType.constructor === Array) {
            data["optionsGlobalConfigProjectionType"] = [];
            for (let item of this.optionsGlobalConfigProjectionType)
                data["optionsGlobalConfigProjectionType"].push(item);
        }
        if (this.optionsGlobalResultOutputTarget && this.optionsGlobalResultOutputTarget.constructor === Array) {
            data["optionsGlobalResultOutputTarget"] = [];
            for (let item of this.optionsGlobalResultOutputTarget)
                data["optionsGlobalResultOutputTarget"].push(item);
        }
        if (this.optionsGlobalConfigParallelProcessingSplitType && this.optionsGlobalConfigParallelProcessingSplitType.constructor === Array) {
            data["optionsGlobalConfigParallelProcessingSplitType"] = [];
            for (let item of this.optionsGlobalConfigParallelProcessingSplitType)
                data["optionsGlobalConfigParallelProcessingSplitType"].push(item);
        }
        if (this.optionsGlobalConfigParallelProcessingProcessorsCalcMethod && this.optionsGlobalConfigParallelProcessingProcessorsCalcMethod.constructor === Array) {
            data["optionsGlobalConfigParallelProcessingProcessorsCalcMethod"] = [];
            for (let item of this.optionsGlobalConfigParallelProcessingProcessorsCalcMethod)
                data["optionsGlobalConfigParallelProcessingProcessorsCalcMethod"].push(item);
        }
        if (this.optionsGlobalResultProjectionOutputMonths && this.optionsGlobalResultProjectionOutputMonths.constructor === Array) {
            data["optionsGlobalResultProjectionOutputMonths"] = [];
            for (let item of this.optionsGlobalResultProjectionOutputMonths)
                data["optionsGlobalResultProjectionOutputMonths"].push(item);
        }
        if (this.optionsResultLevel && this.optionsResultLevel.constructor === Array) {
            data["optionsResultLevel"] = [];
            for (let item of this.optionsResultLevel)
                data["optionsResultLevel"].push(item);
        }
        if (this.optionsResultSubLevel && this.optionsResultSubLevel.constructor === Array) {
            data["optionsResultSubLevel"] = [];
            for (let item of this.optionsResultSubLevel)
                data["optionsResultSubLevel"].push(item);
        }
        if (this.optionsResultOutputVariables && this.optionsResultOutputVariables.constructor === Array) {
            data["optionsResultOutputVariables"] = [];
            for (let item of this.optionsResultOutputVariables)
                data["optionsResultOutputVariables"].push(item);
        }
        data["optionsRunInParallel"] = this.optionsRunInParallel;
        return data; 
    }
}

export interface IKernelConfigAlvViewModel {
    configSetEntries?: ConfigKernelConfigAlvDto[] | undefined;
    optionsNumberOfProcessors?: string[] | undefined;
    optionsGlobalConfigProjectionType?: string[] | undefined;
    optionsGlobalResultOutputTarget?: string[] | undefined;
    optionsGlobalConfigParallelProcessingSplitType?: string[] | undefined;
    optionsGlobalConfigParallelProcessingProcessorsCalcMethod?: string[] | undefined;
    optionsGlobalResultProjectionOutputMonths?: string[] | undefined;
    optionsResultLevel?: string[] | undefined;
    optionsResultSubLevel?: string[] | undefined;
    optionsResultOutputVariables?: string[] | undefined;
    optionsRunInParallel: boolean;
}

export class ConfigKernelConfigAlvDto implements IConfigKernelConfigAlvDto {
    configSetId!: number;
    productId!: number;
    assetGroupId!: number;
    runTypeId!: number;
    modelParamId!: number;

    constructor(data?: IConfigKernelConfigAlvDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.configSetId = data["configSetId"];
            this.productId = data["productId"];
            this.assetGroupId = data["assetGroupId"];
            this.runTypeId = data["runTypeId"];
            this.modelParamId = data["modelParamId"];
        }
    }

    static fromJS(data: any): ConfigKernelConfigAlvDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConfigKernelConfigAlvDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["configSetId"] = this.configSetId;
        data["productId"] = this.productId;
        data["assetGroupId"] = this.assetGroupId;
        data["runTypeId"] = this.runTypeId;
        data["modelParamId"] = this.modelParamId;
        return data; 
    }
}

export interface IConfigKernelConfigAlvDto {
    configSetId: number;
    productId: number;
    assetGroupId: number;
    runTypeId: number;
    modelParamId: number;
}

export class CreateConfigurationAlvCommand implements ICreateConfigurationAlvCommand {
    runGroupId!: number;
    inputSetName?: string | undefined;
    configSetEntries?: ConfigModelParamInputDto[] | undefined;
    configKernelConfigSetEntries?: ConfigKernelConfigAlvDto[] | undefined;

    constructor(data?: ICreateConfigurationAlvCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.runGroupId = data["runGroupId"];
            this.inputSetName = data["inputSetName"];
            if (data["configSetEntries"] && data["configSetEntries"].constructor === Array) {
                this.configSetEntries = [] as any;
                for (let item of data["configSetEntries"])
                    this.configSetEntries!.push(ConfigModelParamInputDto.fromJS(item));
            }
            if (data["configKernelConfigSetEntries"] && data["configKernelConfigSetEntries"].constructor === Array) {
                this.configKernelConfigSetEntries = [] as any;
                for (let item of data["configKernelConfigSetEntries"])
                    this.configKernelConfigSetEntries!.push(ConfigKernelConfigAlvDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateConfigurationAlvCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateConfigurationAlvCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["runGroupId"] = this.runGroupId;
        data["inputSetName"] = this.inputSetName;
        if (this.configSetEntries && this.configSetEntries.constructor === Array) {
            data["configSetEntries"] = [];
            for (let item of this.configSetEntries)
                data["configSetEntries"].push(item.toJSON());
        }
        if (this.configKernelConfigSetEntries && this.configKernelConfigSetEntries.constructor === Array) {
            data["configKernelConfigSetEntries"] = [];
            for (let item of this.configKernelConfigSetEntries)
                data["configKernelConfigSetEntries"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateConfigurationAlvCommand {
    runGroupId: number;
    inputSetName?: string | undefined;
    configSetEntries?: ConfigModelParamInputDto[] | undefined;
    configKernelConfigSetEntries?: ConfigKernelConfigAlvDto[] | undefined;
}

export class SelectionViewModel implements ISelectionViewModel {
    selectionsInCommon?: { [key: string] : number; } | undefined;

    constructor(data?: ISelectionViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["selectionsInCommon"]) {
                this.selectionsInCommon = {} as any;
                for (let key in data["selectionsInCommon"]) {
                    if (data["selectionsInCommon"].hasOwnProperty(key))
                        this.selectionsInCommon![key] = data["selectionsInCommon"][key];
                }
            }
        }
    }

    static fromJS(data: any): SelectionViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SelectionViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.selectionsInCommon) {
            data["selectionsInCommon"] = {};
            for (let key in this.selectionsInCommon) {
                if (this.selectionsInCommon.hasOwnProperty(key))
                    data["selectionsInCommon"][key] = this.selectionsInCommon[key];
            }
        }
        return data; 
    }
}

export interface ISelectionViewModel {
    selectionsInCommon?: { [key: string] : number; } | undefined;
}

export class CreateSelectionAiCommand implements ICreateSelectionAiCommand {
    runGroupId!: number;
    inputSetId!: number;
    inputSetName?: string | undefined;
    selectedProducts?: number[] | undefined;
    selectedRunTypes?: number[] | undefined;
    modelParamSelections?: { [key: string] : number; } | undefined;

    constructor(data?: ICreateSelectionAiCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.runGroupId = data["runGroupId"];
            this.inputSetId = data["inputSetId"];
            this.inputSetName = data["inputSetName"];
            if (data["selectedProducts"] && data["selectedProducts"].constructor === Array) {
                this.selectedProducts = [] as any;
                for (let item of data["selectedProducts"])
                    this.selectedProducts!.push(item);
            }
            if (data["selectedRunTypes"] && data["selectedRunTypes"].constructor === Array) {
                this.selectedRunTypes = [] as any;
                for (let item of data["selectedRunTypes"])
                    this.selectedRunTypes!.push(item);
            }
            if (data["modelParamSelections"]) {
                this.modelParamSelections = {} as any;
                for (let key in data["modelParamSelections"]) {
                    if (data["modelParamSelections"].hasOwnProperty(key))
                        this.modelParamSelections![key] = data["modelParamSelections"][key];
                }
            }
        }
    }

    static fromJS(data: any): CreateSelectionAiCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSelectionAiCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["runGroupId"] = this.runGroupId;
        data["inputSetId"] = this.inputSetId;
        data["inputSetName"] = this.inputSetName;
        if (this.selectedProducts && this.selectedProducts.constructor === Array) {
            data["selectedProducts"] = [];
            for (let item of this.selectedProducts)
                data["selectedProducts"].push(item);
        }
        if (this.selectedRunTypes && this.selectedRunTypes.constructor === Array) {
            data["selectedRunTypes"] = [];
            for (let item of this.selectedRunTypes)
                data["selectedRunTypes"].push(item);
        }
        if (this.modelParamSelections) {
            data["modelParamSelections"] = {};
            for (let key in this.modelParamSelections) {
                if (this.modelParamSelections.hasOwnProperty(key))
                    data["modelParamSelections"][key] = this.modelParamSelections[key];
            }
        }
        return data; 
    }
}

export interface ICreateSelectionAiCommand {
    runGroupId: number;
    inputSetId: number;
    inputSetName?: string | undefined;
    selectedProducts?: number[] | undefined;
    selectedRunTypes?: number[] | undefined;
    modelParamSelections?: { [key: string] : number; } | undefined;
}

export class SelectionAlvViewModel implements ISelectionAlvViewModel {
    selectionsInCommon?: { [key: string] : number; } | undefined;

    constructor(data?: ISelectionAlvViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["selectionsInCommon"]) {
                this.selectionsInCommon = {} as any;
                for (let key in data["selectionsInCommon"]) {
                    if (data["selectionsInCommon"].hasOwnProperty(key))
                        this.selectionsInCommon![key] = data["selectionsInCommon"][key];
                }
            }
        }
    }

    static fromJS(data: any): SelectionAlvViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SelectionAlvViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.selectionsInCommon) {
            data["selectionsInCommon"] = {};
            for (let key in this.selectionsInCommon) {
                if (this.selectionsInCommon.hasOwnProperty(key))
                    data["selectionsInCommon"][key] = this.selectionsInCommon[key];
            }
        }
        return data; 
    }
}

export interface ISelectionAlvViewModel {
    selectionsInCommon?: { [key: string] : number; } | undefined;
}

export class CreateSelectionAlvCommand implements ICreateSelectionAlvCommand {
    runGroupId!: number;
    inputSetId!: number;
    inputSetName?: string | undefined;
    selectedProducts?: number[] | undefined;
    selectedRunTypes?: number[] | undefined;
    modelParamSelections?: { [key: string] : number; } | undefined;

    constructor(data?: ICreateSelectionAlvCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.runGroupId = data["runGroupId"];
            this.inputSetId = data["inputSetId"];
            this.inputSetName = data["inputSetName"];
            if (data["selectedProducts"] && data["selectedProducts"].constructor === Array) {
                this.selectedProducts = [] as any;
                for (let item of data["selectedProducts"])
                    this.selectedProducts!.push(item);
            }
            if (data["selectedRunTypes"] && data["selectedRunTypes"].constructor === Array) {
                this.selectedRunTypes = [] as any;
                for (let item of data["selectedRunTypes"])
                    this.selectedRunTypes!.push(item);
            }
            if (data["modelParamSelections"]) {
                this.modelParamSelections = {} as any;
                for (let key in data["modelParamSelections"]) {
                    if (data["modelParamSelections"].hasOwnProperty(key))
                        this.modelParamSelections![key] = data["modelParamSelections"][key];
                }
            }
        }
    }

    static fromJS(data: any): CreateSelectionAlvCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSelectionAlvCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["runGroupId"] = this.runGroupId;
        data["inputSetId"] = this.inputSetId;
        data["inputSetName"] = this.inputSetName;
        if (this.selectedProducts && this.selectedProducts.constructor === Array) {
            data["selectedProducts"] = [];
            for (let item of this.selectedProducts)
                data["selectedProducts"].push(item);
        }
        if (this.selectedRunTypes && this.selectedRunTypes.constructor === Array) {
            data["selectedRunTypes"] = [];
            for (let item of this.selectedRunTypes)
                data["selectedRunTypes"].push(item);
        }
        if (this.modelParamSelections) {
            data["modelParamSelections"] = {};
            for (let key in this.modelParamSelections) {
                if (this.modelParamSelections.hasOwnProperty(key))
                    data["modelParamSelections"][key] = this.modelParamSelections[key];
            }
        }
        return data; 
    }
}

export interface ICreateSelectionAlvCommand {
    runGroupId: number;
    inputSetId: number;
    inputSetName?: string | undefined;
    selectedProducts?: number[] | undefined;
    selectedRunTypes?: number[] | undefined;
    modelParamSelections?: { [key: string] : number; } | undefined;
}

export class RunDefinitionDto implements IRunDefinitionDto {
    modelParamId!: number;
    runName?: string | undefined;
    subRun?: string | undefined;
    setUpFunctionName?: string | undefined;
    param1?: string | undefined;
    param2?: string | undefined;
    param3?: string | undefined;
    param4?: string | undefined;
    param5?: string | undefined;
    param6?: string | undefined;

    constructor(data?: IRunDefinitionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.modelParamId = data["modelParamId"];
            this.runName = data["runName"];
            this.subRun = data["subRun"];
            this.setUpFunctionName = data["setUpFunctionName"];
            this.param1 = data["param1"];
            this.param2 = data["param2"];
            this.param3 = data["param3"];
            this.param4 = data["param4"];
            this.param5 = data["param5"];
            this.param6 = data["param6"];
        }
    }

    static fromJS(data: any): RunDefinitionDto {
        data = typeof data === 'object' ? data : {};
        let result = new RunDefinitionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelParamId"] = this.modelParamId;
        data["runName"] = this.runName;
        data["subRun"] = this.subRun;
        data["setUpFunctionName"] = this.setUpFunctionName;
        data["param1"] = this.param1;
        data["param2"] = this.param2;
        data["param3"] = this.param3;
        data["param4"] = this.param4;
        data["param5"] = this.param5;
        data["param6"] = this.param6;
        return data; 
    }
}

export interface IRunDefinitionDto {
    modelParamId: number;
    runName?: string | undefined;
    subRun?: string | undefined;
    setUpFunctionName?: string | undefined;
    param1?: string | undefined;
    param2?: string | undefined;
    param3?: string | undefined;
    param4?: string | undefined;
    param5?: string | undefined;
    param6?: string | undefined;
}

export class KernelConfigDto implements IKernelConfigDto {
    modelParamId!: number;
    numberOfProcessors?: string | undefined;
    policyBlockSize!: number;
    parallelSettingsCalculationMethod?: string | undefined;
    runInParallel?: string | undefined;
    parallelProcessingType?: string | undefined;
    numberOfSimulations!: number;
    projectionDurationInMonths!: number;
    stochasticRateAdjustmentFactor!: number;
    esgSource?: string | undefined;
    esgDatabaseServer?: string | undefined;
    esgXmlDirectory?: string | undefined;
    benefitClaimScalar!: number;
    resultLevel?: string | undefined;
    resultSubLevel?: string | undefined;
    resultOutputTarget?: string | undefined;
    resultLevelDetailedPolicyGroupingProperty?: string | undefined;
    resultLevelDebugPolicyNumber?: string | undefined;
    resultLevelDebugSimulationNumber!: number;
    resultProjection?: string | undefined;
    resultSummaryOutputVariables?: string | undefined;
    resultDetailedOutputVariables?: string | undefined;
    resultDebugOutputVariables?: string | undefined;
    requiredPolicyDataVariables?: string | undefined;
    requiredAssetDataVariables?: string | undefined;

    constructor(data?: IKernelConfigDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.modelParamId = data["modelParamId"];
            this.numberOfProcessors = data["numberOfProcessors"];
            this.policyBlockSize = data["policyBlockSize"];
            this.parallelSettingsCalculationMethod = data["parallelSettingsCalculationMethod"];
            this.runInParallel = data["runInParallel"];
            this.parallelProcessingType = data["parallelProcessingType"];
            this.numberOfSimulations = data["numberOfSimulations"];
            this.projectionDurationInMonths = data["projectionDurationInMonths"];
            this.stochasticRateAdjustmentFactor = data["stochasticRateAdjustmentFactor"];
            this.esgSource = data["esgSource"];
            this.esgDatabaseServer = data["esgDatabaseServer"];
            this.esgXmlDirectory = data["esgXmlDirectory"];
            this.benefitClaimScalar = data["benefitClaimScalar"];
            this.resultLevel = data["resultLevel"];
            this.resultSubLevel = data["resultSubLevel"];
            this.resultOutputTarget = data["resultOutputTarget"];
            this.resultLevelDetailedPolicyGroupingProperty = data["resultLevelDetailedPolicyGroupingProperty"];
            this.resultLevelDebugPolicyNumber = data["resultLevelDebugPolicyNumber"];
            this.resultLevelDebugSimulationNumber = data["resultLevelDebugSimulationNumber"];
            this.resultProjection = data["resultProjection"];
            this.resultSummaryOutputVariables = data["resultSummaryOutputVariables"];
            this.resultDetailedOutputVariables = data["resultDetailedOutputVariables"];
            this.resultDebugOutputVariables = data["resultDebugOutputVariables"];
            this.requiredPolicyDataVariables = data["requiredPolicyDataVariables"];
            this.requiredAssetDataVariables = data["requiredAssetDataVariables"];
        }
    }

    static fromJS(data: any): KernelConfigDto {
        data = typeof data === 'object' ? data : {};
        let result = new KernelConfigDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelParamId"] = this.modelParamId;
        data["numberOfProcessors"] = this.numberOfProcessors;
        data["policyBlockSize"] = this.policyBlockSize;
        data["parallelSettingsCalculationMethod"] = this.parallelSettingsCalculationMethod;
        data["runInParallel"] = this.runInParallel;
        data["parallelProcessingType"] = this.parallelProcessingType;
        data["numberOfSimulations"] = this.numberOfSimulations;
        data["projectionDurationInMonths"] = this.projectionDurationInMonths;
        data["stochasticRateAdjustmentFactor"] = this.stochasticRateAdjustmentFactor;
        data["esgSource"] = this.esgSource;
        data["esgDatabaseServer"] = this.esgDatabaseServer;
        data["esgXmlDirectory"] = this.esgXmlDirectory;
        data["benefitClaimScalar"] = this.benefitClaimScalar;
        data["resultLevel"] = this.resultLevel;
        data["resultSubLevel"] = this.resultSubLevel;
        data["resultOutputTarget"] = this.resultOutputTarget;
        data["resultLevelDetailedPolicyGroupingProperty"] = this.resultLevelDetailedPolicyGroupingProperty;
        data["resultLevelDebugPolicyNumber"] = this.resultLevelDebugPolicyNumber;
        data["resultLevelDebugSimulationNumber"] = this.resultLevelDebugSimulationNumber;
        data["resultProjection"] = this.resultProjection;
        data["resultSummaryOutputVariables"] = this.resultSummaryOutputVariables;
        data["resultDetailedOutputVariables"] = this.resultDetailedOutputVariables;
        data["resultDebugOutputVariables"] = this.resultDebugOutputVariables;
        data["requiredPolicyDataVariables"] = this.requiredPolicyDataVariables;
        data["requiredAssetDataVariables"] = this.requiredAssetDataVariables;
        return data; 
    }
}

export interface IKernelConfigDto {
    modelParamId: number;
    numberOfProcessors?: string | undefined;
    policyBlockSize: number;
    parallelSettingsCalculationMethod?: string | undefined;
    runInParallel?: string | undefined;
    parallelProcessingType?: string | undefined;
    numberOfSimulations: number;
    projectionDurationInMonths: number;
    stochasticRateAdjustmentFactor: number;
    esgSource?: string | undefined;
    esgDatabaseServer?: string | undefined;
    esgXmlDirectory?: string | undefined;
    benefitClaimScalar: number;
    resultLevel?: string | undefined;
    resultSubLevel?: string | undefined;
    resultOutputTarget?: string | undefined;
    resultLevelDetailedPolicyGroupingProperty?: string | undefined;
    resultLevelDebugPolicyNumber?: string | undefined;
    resultLevelDebugSimulationNumber: number;
    resultProjection?: string | undefined;
    resultSummaryOutputVariables?: string | undefined;
    resultDetailedOutputVariables?: string | undefined;
    resultDebugOutputVariables?: string | undefined;
    requiredPolicyDataVariables?: string | undefined;
    requiredAssetDataVariables?: string | undefined;
}

export class CalculationExecutionDto implements ICalculationExecutionDto {
    modelParamId!: number;
    calculationStage?: string | undefined;
    stepType?: string | undefined;
    stepName?: string | undefined;
    stepAlgorithm?: string | undefined;
    orderId!: number;

    constructor(data?: ICalculationExecutionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.modelParamId = data["modelParamId"];
            this.calculationStage = data["calculationStage"];
            this.stepType = data["stepType"];
            this.stepName = data["stepName"];
            this.stepAlgorithm = data["stepAlgorithm"];
            this.orderId = data["orderId"];
        }
    }

    static fromJS(data: any): CalculationExecutionDto {
        data = typeof data === 'object' ? data : {};
        let result = new CalculationExecutionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelParamId"] = this.modelParamId;
        data["calculationStage"] = this.calculationStage;
        data["stepType"] = this.stepType;
        data["stepName"] = this.stepName;
        data["stepAlgorithm"] = this.stepAlgorithm;
        data["orderId"] = this.orderId;
        return data; 
    }
}

export interface ICalculationExecutionDto {
    modelParamId: number;
    calculationStage?: string | undefined;
    stepType?: string | undefined;
    stepName?: string | undefined;
    stepAlgorithm?: string | undefined;
    orderId: number;
}

export class ExpensesDto implements IExpensesDto {
    modelParamId!: number;
    currency!: number;
    eurToGbpFx!: number;
    usdToGbpFx!: number;
    renewalTransactionAmount!: number;
    renewalTransactionDriver!: number;
    renewalOverheadAmount!: number;
    renewalOverheadDriver!: number;
    inflationRate!: number;
    inflationFrequency!: number;
    initialFrequency!: number;
    renewalFrequency!: number;

    constructor(data?: IExpensesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.modelParamId = data["modelParamId"];
            this.currency = data["currency"];
            this.eurToGbpFx = data["eurToGbpFx"];
            this.usdToGbpFx = data["usdToGbpFx"];
            this.renewalTransactionAmount = data["renewalTransactionAmount"];
            this.renewalTransactionDriver = data["renewalTransactionDriver"];
            this.renewalOverheadAmount = data["renewalOverheadAmount"];
            this.renewalOverheadDriver = data["renewalOverheadDriver"];
            this.inflationRate = data["inflationRate"];
            this.inflationFrequency = data["inflationFrequency"];
            this.initialFrequency = data["initialFrequency"];
            this.renewalFrequency = data["renewalFrequency"];
        }
    }

    static fromJS(data: any): ExpensesDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExpensesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelParamId"] = this.modelParamId;
        data["currency"] = this.currency;
        data["eurToGbpFx"] = this.eurToGbpFx;
        data["usdToGbpFx"] = this.usdToGbpFx;
        data["renewalTransactionAmount"] = this.renewalTransactionAmount;
        data["renewalTransactionDriver"] = this.renewalTransactionDriver;
        data["renewalOverheadAmount"] = this.renewalOverheadAmount;
        data["renewalOverheadDriver"] = this.renewalOverheadDriver;
        data["inflationRate"] = this.inflationRate;
        data["inflationFrequency"] = this.inflationFrequency;
        data["initialFrequency"] = this.initialFrequency;
        data["renewalFrequency"] = this.renewalFrequency;
        return data; 
    }
}

export interface IExpensesDto {
    modelParamId: number;
    currency: number;
    eurToGbpFx: number;
    usdToGbpFx: number;
    renewalTransactionAmount: number;
    renewalTransactionDriver: number;
    renewalOverheadAmount: number;
    renewalOverheadDriver: number;
    inflationRate: number;
    inflationFrequency: number;
    initialFrequency: number;
    renewalFrequency: number;
}

export class EconomicDto implements IEconomicDto {
    modelParamId!: number;
    ifrsCreditSpread!: number;
    esgInternalRandomNumberGeneratorFixedSeedEnabledIndicator!: number;
    esgInternalRandomNumberGeneratorFixedSeed!: number;
    esgInternalVolatility!: number;
    soniaRate!: number;

    constructor(data?: IEconomicDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.modelParamId = data["modelParamId"];
            this.ifrsCreditSpread = data["ifrsCreditSpread"];
            this.esgInternalRandomNumberGeneratorFixedSeedEnabledIndicator = data["esgInternalRandomNumberGeneratorFixedSeedEnabledIndicator"];
            this.esgInternalRandomNumberGeneratorFixedSeed = data["esgInternalRandomNumberGeneratorFixedSeed"];
            this.esgInternalVolatility = data["esgInternalVolatility"];
            this.soniaRate = data["soniaRate"];
        }
    }

    static fromJS(data: any): EconomicDto {
        data = typeof data === 'object' ? data : {};
        let result = new EconomicDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelParamId"] = this.modelParamId;
        data["ifrsCreditSpread"] = this.ifrsCreditSpread;
        data["esgInternalRandomNumberGeneratorFixedSeedEnabledIndicator"] = this.esgInternalRandomNumberGeneratorFixedSeedEnabledIndicator;
        data["esgInternalRandomNumberGeneratorFixedSeed"] = this.esgInternalRandomNumberGeneratorFixedSeed;
        data["esgInternalVolatility"] = this.esgInternalVolatility;
        data["soniaRate"] = this.soniaRate;
        return data; 
    }
}

export interface IEconomicDto {
    modelParamId: number;
    ifrsCreditSpread: number;
    esgInternalRandomNumberGeneratorFixedSeedEnabledIndicator: number;
    esgInternalRandomNumberGeneratorFixedSeed: number;
    esgInternalVolatility: number;
    soniaRate: number;
}

export class KernelConfigAlvDto implements IKernelConfigAlvDto {
    modelParamId!: number;
    globalConfigRunInParallel?: string | undefined;
    globalConfigParallelProcessingProcessorsCalcMethod?: string | undefined;
    globalConfigProjectionType?: string | undefined;
    globalConfigParallelProcessingSplitType?: string | undefined;
    globalConfigProjectionDurationInMonths!: number;
    globalConfigNumberOfProcessors!: number;
    globalConfigNumberOfSimulations!: number;
    globalConfigSimBlockSize!: number;
    globalConfigResultDirectorySuffix?: string | undefined;
    globalMultiProcessingInfoBlockSize!: number;
    globalResultPortfolioSubLevel?: string | undefined;
    globalResultOutputTarget?: string | undefined;
    globalResultProjectionOutputMonths?: string | undefined;
    resultMultiProcessingInfo!: number;
    resultLevel?: string | undefined;
    resultSubLevel?: string | undefined;
    resultDetailedLiabilityGroupingPropertyName?: string | undefined;
    resultDebugSimulationNumber!: number;
    resultDebugLiabilityProperty?: string | undefined;
    resultDebugLiabilityValue?: string | undefined;
    resultSummaryOutputVariables?: string | undefined;
    resultDetailedOutputVariables?: string | undefined;
    resultDebugOutputVariables?: string | undefined;
    resultDebugAssetProperty?: string | undefined;
    resultDebugAssetValue?: string | undefined;
    managementInvestmentInteractionFrequencyString?: string | undefined;
    managementInvestmentCalculationExecutionId?: number | undefined;

    constructor(data?: IKernelConfigAlvDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.modelParamId = data["modelParamId"];
            this.globalConfigRunInParallel = data["globalConfigRunInParallel"];
            this.globalConfigParallelProcessingProcessorsCalcMethod = data["globalConfigParallelProcessingProcessorsCalcMethod"];
            this.globalConfigProjectionType = data["globalConfigProjectionType"];
            this.globalConfigParallelProcessingSplitType = data["globalConfigParallelProcessingSplitType"];
            this.globalConfigProjectionDurationInMonths = data["globalConfigProjectionDurationInMonths"];
            this.globalConfigNumberOfProcessors = data["globalConfigNumberOfProcessors"];
            this.globalConfigNumberOfSimulations = data["globalConfigNumberOfSimulations"];
            this.globalConfigSimBlockSize = data["globalConfigSimBlockSize"];
            this.globalConfigResultDirectorySuffix = data["globalConfigResultDirectorySuffix"];
            this.globalMultiProcessingInfoBlockSize = data["globalMultiProcessingInfoBlockSize"];
            this.globalResultPortfolioSubLevel = data["globalResultPortfolioSubLevel"];
            this.globalResultOutputTarget = data["globalResultOutputTarget"];
            this.globalResultProjectionOutputMonths = data["globalResultProjectionOutputMonths"];
            this.resultMultiProcessingInfo = data["resultMultiProcessingInfo"];
            this.resultLevel = data["resultLevel"];
            this.resultSubLevel = data["resultSubLevel"];
            this.resultDetailedLiabilityGroupingPropertyName = data["resultDetailedLiabilityGroupingPropertyName"];
            this.resultDebugSimulationNumber = data["resultDebugSimulationNumber"];
            this.resultDebugLiabilityProperty = data["resultDebugLiabilityProperty"];
            this.resultDebugLiabilityValue = data["resultDebugLiabilityValue"];
            this.resultSummaryOutputVariables = data["resultSummaryOutputVariables"];
            this.resultDetailedOutputVariables = data["resultDetailedOutputVariables"];
            this.resultDebugOutputVariables = data["resultDebugOutputVariables"];
            this.resultDebugAssetProperty = data["resultDebugAssetProperty"];
            this.resultDebugAssetValue = data["resultDebugAssetValue"];
            this.managementInvestmentInteractionFrequencyString = data["managementInvestmentInteractionFrequencyString"];
            this.managementInvestmentCalculationExecutionId = data["managementInvestmentCalculationExecutionId"];
        }
    }

    static fromJS(data: any): KernelConfigAlvDto {
        data = typeof data === 'object' ? data : {};
        let result = new KernelConfigAlvDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["modelParamId"] = this.modelParamId;
        data["globalConfigRunInParallel"] = this.globalConfigRunInParallel;
        data["globalConfigParallelProcessingProcessorsCalcMethod"] = this.globalConfigParallelProcessingProcessorsCalcMethod;
        data["globalConfigProjectionType"] = this.globalConfigProjectionType;
        data["globalConfigParallelProcessingSplitType"] = this.globalConfigParallelProcessingSplitType;
        data["globalConfigProjectionDurationInMonths"] = this.globalConfigProjectionDurationInMonths;
        data["globalConfigNumberOfProcessors"] = this.globalConfigNumberOfProcessors;
        data["globalConfigNumberOfSimulations"] = this.globalConfigNumberOfSimulations;
        data["globalConfigSimBlockSize"] = this.globalConfigSimBlockSize;
        data["globalConfigResultDirectorySuffix"] = this.globalConfigResultDirectorySuffix;
        data["globalMultiProcessingInfoBlockSize"] = this.globalMultiProcessingInfoBlockSize;
        data["globalResultPortfolioSubLevel"] = this.globalResultPortfolioSubLevel;
        data["globalResultOutputTarget"] = this.globalResultOutputTarget;
        data["globalResultProjectionOutputMonths"] = this.globalResultProjectionOutputMonths;
        data["resultMultiProcessingInfo"] = this.resultMultiProcessingInfo;
        data["resultLevel"] = this.resultLevel;
        data["resultSubLevel"] = this.resultSubLevel;
        data["resultDetailedLiabilityGroupingPropertyName"] = this.resultDetailedLiabilityGroupingPropertyName;
        data["resultDebugSimulationNumber"] = this.resultDebugSimulationNumber;
        data["resultDebugLiabilityProperty"] = this.resultDebugLiabilityProperty;
        data["resultDebugLiabilityValue"] = this.resultDebugLiabilityValue;
        data["resultSummaryOutputVariables"] = this.resultSummaryOutputVariables;
        data["resultDetailedOutputVariables"] = this.resultDetailedOutputVariables;
        data["resultDebugOutputVariables"] = this.resultDebugOutputVariables;
        data["resultDebugAssetProperty"] = this.resultDebugAssetProperty;
        data["resultDebugAssetValue"] = this.resultDebugAssetValue;
        data["managementInvestmentInteractionFrequencyString"] = this.managementInvestmentInteractionFrequencyString;
        data["managementInvestmentCalculationExecutionId"] = this.managementInvestmentCalculationExecutionId;
        return data; 
    }
}

export interface IKernelConfigAlvDto {
    modelParamId: number;
    globalConfigRunInParallel?: string | undefined;
    globalConfigParallelProcessingProcessorsCalcMethod?: string | undefined;
    globalConfigProjectionType?: string | undefined;
    globalConfigParallelProcessingSplitType?: string | undefined;
    globalConfigProjectionDurationInMonths: number;
    globalConfigNumberOfProcessors: number;
    globalConfigNumberOfSimulations: number;
    globalConfigSimBlockSize: number;
    globalConfigResultDirectorySuffix?: string | undefined;
    globalMultiProcessingInfoBlockSize: number;
    globalResultPortfolioSubLevel?: string | undefined;
    globalResultOutputTarget?: string | undefined;
    globalResultProjectionOutputMonths?: string | undefined;
    resultMultiProcessingInfo: number;
    resultLevel?: string | undefined;
    resultSubLevel?: string | undefined;
    resultDetailedLiabilityGroupingPropertyName?: string | undefined;
    resultDebugSimulationNumber: number;
    resultDebugLiabilityProperty?: string | undefined;
    resultDebugLiabilityValue?: string | undefined;
    resultSummaryOutputVariables?: string | undefined;
    resultDetailedOutputVariables?: string | undefined;
    resultDebugOutputVariables?: string | undefined;
    resultDebugAssetProperty?: string | undefined;
    resultDebugAssetValue?: string | undefined;
    managementInvestmentInteractionFrequencyString?: string | undefined;
    managementInvestmentCalculationExecutionId?: number | undefined;
}

export class CreateKernelConfigAlvCommand implements ICreateKernelConfigAlvCommand {
    name?: string | undefined;
    inputData?: KernelConfigAlvDto | undefined;

    constructor(data?: ICreateKernelConfigAlvCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.inputData = data["inputData"] ? KernelConfigAlvDto.fromJS(data["inputData"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateKernelConfigAlvCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateKernelConfigAlvCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["inputData"] = this.inputData ? this.inputData.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateKernelConfigAlvCommand {
    name?: string | undefined;
    inputData?: KernelConfigAlvDto | undefined;
}

export class CreateKernelConfigCommand implements ICreateKernelConfigCommand {
    name?: string | undefined;
    kernelConfigInput?: KernelConfigDto | undefined;

    constructor(data?: ICreateKernelConfigCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.kernelConfigInput = data["kernelConfigInput"] ? KernelConfigDto.fromJS(data["kernelConfigInput"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateKernelConfigCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateKernelConfigCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["kernelConfigInput"] = this.kernelConfigInput ? this.kernelConfigInput.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateKernelConfigCommand {
    name?: string | undefined;
    kernelConfigInput?: KernelConfigDto | undefined;
}

export class CreateRunDefinitionCommand implements ICreateRunDefinitionCommand {
    name?: string | undefined;
    runDefinitionInput?: RunDefinitionDto[] | undefined;

    constructor(data?: ICreateRunDefinitionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            if (data["runDefinitionInput"] && data["runDefinitionInput"].constructor === Array) {
                this.runDefinitionInput = [] as any;
                for (let item of data["runDefinitionInput"])
                    this.runDefinitionInput!.push(RunDefinitionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateRunDefinitionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRunDefinitionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.runDefinitionInput && this.runDefinitionInput.constructor === Array) {
            data["runDefinitionInput"] = [];
            for (let item of this.runDefinitionInput)
                data["runDefinitionInput"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateRunDefinitionCommand {
    name?: string | undefined;
    runDefinitionInput?: RunDefinitionDto[] | undefined;
}

export class CreateCalculationExecutionCommand implements ICreateCalculationExecutionCommand {
    calculationExecutionInput?: CalculationExecutionDto[] | undefined;

    constructor(data?: ICreateCalculationExecutionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["calculationExecutionInput"] && data["calculationExecutionInput"].constructor === Array) {
                this.calculationExecutionInput = [] as any;
                for (let item of data["calculationExecutionInput"])
                    this.calculationExecutionInput!.push(CalculationExecutionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateCalculationExecutionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCalculationExecutionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.calculationExecutionInput && this.calculationExecutionInput.constructor === Array) {
            data["calculationExecutionInput"] = [];
            for (let item of this.calculationExecutionInput)
                data["calculationExecutionInput"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateCalculationExecutionCommand {
    calculationExecutionInput?: CalculationExecutionDto[] | undefined;
}

export class CreateEconomicCommand implements ICreateEconomicCommand {
    economicInput?: EconomicDto | undefined;

    constructor(data?: ICreateEconomicCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.economicInput = data["economicInput"] ? EconomicDto.fromJS(data["economicInput"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateEconomicCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateEconomicCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["economicInput"] = this.economicInput ? this.economicInput.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateEconomicCommand {
    economicInput?: EconomicDto | undefined;
}

export class CreateExpensesCommand implements ICreateExpensesCommand {
    expensesInput?: ExpensesDto[] | undefined;

    constructor(data?: ICreateExpensesCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["expensesInput"] && data["expensesInput"].constructor === Array) {
                this.expensesInput = [] as any;
                for (let item of data["expensesInput"])
                    this.expensesInput!.push(ExpensesDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateExpensesCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateExpensesCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.expensesInput && this.expensesInput.constructor === Array) {
            data["expensesInput"] = [];
            for (let item of this.expensesInput)
                data["expensesInput"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateExpensesCommand {
    expensesInput?: ExpensesDto[] | undefined;
}

export class QueueActionDto implements IQueueActionDto {
    runId!: number;
    runGroupId!: number;
    actionId!: number;
    nameCountry?: string | undefined;
    nameRunGroup?: string | undefined;
    nameType?: string | undefined;
    processingDate!: Date;
    valuationDate!: Date;
    countryUnitId!: number;
    actionTypeId!: number;
    currencyId!: number;
    sourceId?: number | undefined;
    status?: number | undefined;
    associationTypeId!: number;
    progress!: number;
    addedBy?: number | undefined;
    addedWhen?: string | undefined;
    triggerTime?: string | undefined;
    priorityId?: number | undefined;
    orderId?: number | undefined;
    start?: Date | undefined;
    end?: Date | undefined;
    duration?: string | undefined;
    serverName?: string | undefined;
    error?: string | undefined;
    comment?: string | undefined;

    constructor(data?: IQueueActionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.runId = data["runId"];
            this.runGroupId = data["runGroupId"];
            this.actionId = data["actionId"];
            this.nameCountry = data["nameCountry"];
            this.nameRunGroup = data["nameRunGroup"];
            this.nameType = data["nameType"];
            this.processingDate = data["processingDate"] ? new Date(data["processingDate"].toString()) : <any>undefined;
            this.valuationDate = data["valuationDate"] ? new Date(data["valuationDate"].toString()) : <any>undefined;
            this.countryUnitId = data["countryUnitId"];
            this.actionTypeId = data["actionTypeId"];
            this.currencyId = data["currencyId"];
            this.sourceId = data["sourceId"];
            this.status = data["status"];
            this.associationTypeId = data["associationTypeId"];
            this.progress = data["progress"];
            this.addedBy = data["addedBy"];
            this.addedWhen = data["addedWhen"];
            this.triggerTime = data["triggerTime"];
            this.priorityId = data["priorityId"];
            this.orderId = data["orderId"];
            this.start = data["start"] ? new Date(data["start"].toString()) : <any>undefined;
            this.end = data["end"] ? new Date(data["end"].toString()) : <any>undefined;
            this.duration = data["duration"];
            this.serverName = data["serverName"];
            this.error = data["error"];
            this.comment = data["comment"];
        }
    }

    static fromJS(data: any): QueueActionDto {
        data = typeof data === 'object' ? data : {};
        let result = new QueueActionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["runId"] = this.runId;
        data["runGroupId"] = this.runGroupId;
        data["actionId"] = this.actionId;
        data["nameCountry"] = this.nameCountry;
        data["nameRunGroup"] = this.nameRunGroup;
        data["nameType"] = this.nameType;
        data["processingDate"] = this.processingDate ? this.processingDate.toISOString() : <any>undefined;
        data["valuationDate"] = this.valuationDate ? this.valuationDate.toISOString() : <any>undefined;
        data["countryUnitId"] = this.countryUnitId;
        data["actionTypeId"] = this.actionTypeId;
        data["currencyId"] = this.currencyId;
        data["sourceId"] = this.sourceId;
        data["status"] = this.status;
        data["associationTypeId"] = this.associationTypeId;
        data["progress"] = this.progress;
        data["addedBy"] = this.addedBy;
        data["addedWhen"] = this.addedWhen;
        data["triggerTime"] = this.triggerTime;
        data["priorityId"] = this.priorityId;
        data["orderId"] = this.orderId;
        data["start"] = this.start ? this.start.toISOString() : <any>undefined;
        data["end"] = this.end ? this.end.toISOString() : <any>undefined;
        data["duration"] = this.duration;
        data["serverName"] = this.serverName;
        data["error"] = this.error;
        data["comment"] = this.comment;
        return data; 
    }
}

export interface IQueueActionDto {
    runId: number;
    runGroupId: number;
    actionId: number;
    nameCountry?: string | undefined;
    nameRunGroup?: string | undefined;
    nameType?: string | undefined;
    processingDate: Date;
    valuationDate: Date;
    countryUnitId: number;
    actionTypeId: number;
    currencyId: number;
    sourceId?: number | undefined;
    status?: number | undefined;
    associationTypeId: number;
    progress: number;
    addedBy?: number | undefined;
    addedWhen?: string | undefined;
    triggerTime?: string | undefined;
    priorityId?: number | undefined;
    orderId?: number | undefined;
    start?: Date | undefined;
    end?: Date | undefined;
    duration?: string | undefined;
    serverName?: string | undefined;
    error?: string | undefined;
    comment?: string | undefined;
}

export class HistoricQueueViewModel implements IHistoricQueueViewModel {
    success?: string | undefined;
    exception?: string | undefined;

    constructor(data?: IHistoricQueueViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["success"];
            this.exception = data["exception"];
        }
    }

    static fromJS(data: any): HistoricQueueViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new HistoricQueueViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["exception"] = this.exception;
        return data; 
    }
}

export interface IHistoricQueueViewModel {
    success?: string | undefined;
    exception?: string | undefined;
}

export class GetStepsListViewModel implements IGetStepsListViewModel {
    stepsEntries?: StepsDto[] | undefined;

    constructor(data?: IGetStepsListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["stepsEntries"] && data["stepsEntries"].constructor === Array) {
                this.stepsEntries = [] as any;
                for (let item of data["stepsEntries"])
                    this.stepsEntries!.push(StepsDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetStepsListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetStepsListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.stepsEntries && this.stepsEntries.constructor === Array) {
            data["stepsEntries"] = [];
            for (let item of this.stepsEntries)
                data["stepsEntries"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetStepsListViewModel {
    stepsEntries?: StepsDto[] | undefined;
}

export class StepsDto implements IStepsDto {
    queueId!: number;
    name?: string | undefined;
    title?: string | undefined;
    valuationDate!: Date;
    actionId!: number;
    sourceId?: number | undefined;
    productId?: number | undefined;
    status?: number | undefined;
    progress!: number;
    start?: string | undefined;
    end?: string | undefined;
    duration?: string | undefined;
    error?: string | undefined;
    comment?: string | undefined;

    constructor(data?: IStepsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.queueId = data["queueId"];
            this.name = data["name"];
            this.title = data["title"];
            this.valuationDate = data["valuationDate"] ? new Date(data["valuationDate"].toString()) : <any>undefined;
            this.actionId = data["actionId"];
            this.sourceId = data["sourceId"];
            this.productId = data["productId"];
            this.status = data["status"];
            this.progress = data["progress"];
            this.start = data["start"];
            this.end = data["end"];
            this.duration = data["duration"];
            this.error = data["error"];
            this.comment = data["comment"];
        }
    }

    static fromJS(data: any): StepsDto {
        data = typeof data === 'object' ? data : {};
        let result = new StepsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["queueId"] = this.queueId;
        data["name"] = this.name;
        data["title"] = this.title;
        data["valuationDate"] = this.valuationDate ? this.valuationDate.toISOString() : <any>undefined;
        data["actionId"] = this.actionId;
        data["sourceId"] = this.sourceId;
        data["productId"] = this.productId;
        data["status"] = this.status;
        data["progress"] = this.progress;
        data["start"] = this.start;
        data["end"] = this.end;
        data["duration"] = this.duration;
        data["error"] = this.error;
        data["comment"] = this.comment;
        return data; 
    }
}

export interface IStepsDto {
    queueId: number;
    name?: string | undefined;
    title?: string | undefined;
    valuationDate: Date;
    actionId: number;
    sourceId?: number | undefined;
    productId?: number | undefined;
    status?: number | undefined;
    progress: number;
    start?: string | undefined;
    end?: string | undefined;
    duration?: string | undefined;
    error?: string | undefined;
    comment?: string | undefined;
}

export class QueueHubMessage implements IQueueHubMessage {
    type?: string | undefined;
    actionEntry?: QueueActionDto | undefined;
    runId!: number;

    constructor(data?: IQueueHubMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.type = data["type"];
            this.actionEntry = data["actionEntry"] ? QueueActionDto.fromJS(data["actionEntry"]) : <any>undefined;
            this.runId = data["runId"];
        }
    }

    static fromJS(data: any): QueueHubMessage {
        data = typeof data === 'object' ? data : {};
        let result = new QueueHubMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["actionEntry"] = this.actionEntry ? this.actionEntry.toJSON() : <any>undefined;
        data["runId"] = this.runId;
        return data; 
    }
}

export interface IQueueHubMessage {
    type?: string | undefined;
    actionEntry?: QueueActionDto | undefined;
    runId: number;
}

export class RungroupsViewModel implements IRungroupsViewModel {
    rungroups?: RungroupEntry[] | undefined;
    totalRungroups!: number;

    constructor(data?: IRungroupsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["rungroups"] && data["rungroups"].constructor === Array) {
                this.rungroups = [] as any;
                for (let item of data["rungroups"])
                    this.rungroups!.push(RungroupEntry.fromJS(item));
            }
            this.totalRungroups = data["totalRungroups"];
        }
    }

    static fromJS(data: any): RungroupsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RungroupsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.rungroups && this.rungroups.constructor === Array) {
            data["rungroups"] = [];
            for (let item of this.rungroups)
                data["rungroups"].push(item.toJSON());
        }
        data["totalRungroups"] = this.totalRungroups;
        return data; 
    }
}

export interface IRungroupsViewModel {
    rungroups?: RungroupEntry[] | undefined;
    totalRungroups: number;
}

export class RungroupEntry implements IRungroupEntry {
    name?: string | undefined;
    rungroupId!: number;
    valuationDate!: Date;
    scheduled?: Date | undefined;
    products?: string | undefined;
    addedBy?: string | undefined;
    countryUnitId!: number;

    constructor(data?: IRungroupEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.rungroupId = data["rungroupId"];
            this.valuationDate = data["valuationDate"] ? new Date(data["valuationDate"].toString()) : <any>undefined;
            this.scheduled = data["scheduled"] ? new Date(data["scheduled"].toString()) : <any>undefined;
            this.products = data["products"];
            this.addedBy = data["addedBy"];
            this.countryUnitId = data["countryUnitId"];
        }
    }

    static fromJS(data: any): RungroupEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RungroupEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["rungroupId"] = this.rungroupId;
        data["valuationDate"] = this.valuationDate ? this.valuationDate.toISOString() : <any>undefined;
        data["scheduled"] = this.scheduled ? this.scheduled.toISOString() : <any>undefined;
        data["products"] = this.products;
        data["addedBy"] = this.addedBy;
        data["countryUnitId"] = this.countryUnitId;
        return data; 
    }
}

export interface IRungroupEntry {
    name?: string | undefined;
    rungroupId: number;
    valuationDate: Date;
    scheduled?: Date | undefined;
    products?: string | undefined;
    addedBy?: string | undefined;
    countryUnitId: number;
}

export class AddRungroupViewModel implements IAddRungroupViewModel {
    success?: string | undefined;
    exception?: string | undefined;

    constructor(data?: IAddRungroupViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["success"];
            this.exception = data["exception"];
        }
    }

    static fromJS(data: any): AddRungroupViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new AddRungroupViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["exception"] = this.exception;
        return data; 
    }
}

export interface IAddRungroupViewModel {
    success?: string | undefined;
    exception?: string | undefined;
}

export class RungroupProgressViewModel implements IRungroupProgressViewModel {
    success?: string | undefined;
    exception?: string | undefined;

    constructor(data?: IRungroupProgressViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["success"];
            this.exception = data["exception"];
        }
    }

    static fromJS(data: any): RungroupProgressViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RungroupProgressViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["exception"] = this.exception;
        return data; 
    }
}

export interface IRungroupProgressViewModel {
    success?: string | undefined;
    exception?: string | undefined;
}

export class RungroupProgressSubmitViewModel implements IRungroupProgressSubmitViewModel {
    success?: string | undefined;
    exception?: string | undefined;

    constructor(data?: IRungroupProgressSubmitViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["success"];
            this.exception = data["exception"];
        }
    }

    static fromJS(data: any): RungroupProgressSubmitViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RungroupProgressSubmitViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["exception"] = this.exception;
        return data; 
    }
}

export interface IRungroupProgressSubmitViewModel {
    success?: string | undefined;
    exception?: string | undefined;
}

export class SubmitRungroupProgressConfirmViewModel implements ISubmitRungroupProgressConfirmViewModel {
    success?: string | undefined;
    exception?: string | undefined;

    constructor(data?: ISubmitRungroupProgressConfirmViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["success"];
            this.exception = data["exception"];
        }
    }

    static fromJS(data: any): SubmitRungroupProgressConfirmViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SubmitRungroupProgressConfirmViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["exception"] = this.exception;
        return data; 
    }
}

export interface ISubmitRungroupProgressConfirmViewModel {
    success?: string | undefined;
    exception?: string | undefined;
}

export class DeleteRungroupViewModel implements IDeleteRungroupViewModel {
    response?: string | undefined;
    exception?: string | undefined;

    constructor(data?: IDeleteRungroupViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.response = data["response"];
            this.exception = data["exception"];
        }
    }

    static fromJS(data: any): DeleteRungroupViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteRungroupViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response;
        data["exception"] = this.exception;
        return data; 
    }
}

export interface IDeleteRungroupViewModel {
    response?: string | undefined;
    exception?: string | undefined;
}

export class ApproveRungroupViewModel implements IApproveRungroupViewModel {
    response?: string | undefined;
    exception?: string | undefined;

    constructor(data?: IApproveRungroupViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.response = data["response"];
            this.exception = data["exception"];
        }
    }

    static fromJS(data: any): ApproveRungroupViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ApproveRungroupViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response;
        data["exception"] = this.exception;
        return data; 
    }
}

export interface IApproveRungroupViewModel {
    response?: string | undefined;
    exception?: string | undefined;
}

export class AddNewRungroupCommand implements IAddNewRungroupCommand {
    rungroupForm?: string | undefined;

    constructor(data?: IAddNewRungroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.rungroupForm = data["rungroupForm"];
        }
    }

    static fromJS(data: any): AddNewRungroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddNewRungroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rungroupForm"] = this.rungroupForm;
        return data; 
    }
}

export interface IAddNewRungroupCommand {
    rungroupForm?: string | undefined;
}

export class GetRunIdsViewModel implements IGetRunIdsViewModel {
    runIds?: KeyValuePairOfInt32AndString[] | undefined;
    valuationDate!: Date;
    actionId!: number;
    sourceId!: number;

    constructor(data?: IGetRunIdsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["runIds"] && data["runIds"].constructor === Array) {
                this.runIds = [] as any;
                for (let item of data["runIds"])
                    this.runIds!.push(KeyValuePairOfInt32AndString.fromJS(item));
            }
            this.valuationDate = data["valuationDate"] ? new Date(data["valuationDate"].toString()) : <any>undefined;
            this.actionId = data["actionId"];
            this.sourceId = data["sourceId"];
        }
    }

    static fromJS(data: any): GetRunIdsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetRunIdsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.runIds && this.runIds.constructor === Array) {
            data["runIds"] = [];
            for (let item of this.runIds)
                data["runIds"].push(item.toJSON());
        }
        data["valuationDate"] = this.valuationDate ? this.valuationDate.toISOString() : <any>undefined;
        data["actionId"] = this.actionId;
        data["sourceId"] = this.sourceId;
        return data; 
    }
}

export interface IGetRunIdsViewModel {
    runIds?: KeyValuePairOfInt32AndString[] | undefined;
    valuationDate: Date;
    actionId: number;
    sourceId: number;
}

export class KeyValuePairOfInt32AndString extends ValueType implements IKeyValuePairOfInt32AndString {
    key!: number;
    value?: string | undefined;

    constructor(data?: IKeyValuePairOfInt32AndString) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.key = data["key"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): KeyValuePairOfInt32AndString {
        data = typeof data === 'object' ? data : {};
        let result = new KeyValuePairOfInt32AndString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value;
        super.toJSON(data);
        return data; 
    }
}

export interface IKeyValuePairOfInt32AndString extends IValueType {
    key: number;
    value?: string | undefined;
}

export class GetLoadIdsViewModel implements IGetLoadIdsViewModel {
    loadIds?: KeyValuePairOfInt32AndString[] | undefined;
    actionId!: number;
    sourceId!: number;

    constructor(data?: IGetLoadIdsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["loadIds"] && data["loadIds"].constructor === Array) {
                this.loadIds = [] as any;
                for (let item of data["loadIds"])
                    this.loadIds!.push(KeyValuePairOfInt32AndString.fromJS(item));
            }
            this.actionId = data["actionId"];
            this.sourceId = data["sourceId"];
        }
    }

    static fromJS(data: any): GetLoadIdsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetLoadIdsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.loadIds && this.loadIds.constructor === Array) {
            data["loadIds"] = [];
            for (let item of this.loadIds)
                data["loadIds"].push(item.toJSON());
        }
        data["actionId"] = this.actionId;
        data["sourceId"] = this.sourceId;
        return data; 
    }
}

export interface IGetLoadIdsViewModel {
    loadIds?: KeyValuePairOfInt32AndString[] | undefined;
    actionId: number;
    sourceId: number;
}

export class GetRunGroupOpeningAttributionsViewModel implements IGetRunGroupOpeningAttributionsViewModel {
    response?: string | undefined;
    exception?: string | undefined;

    constructor(data?: IGetRunGroupOpeningAttributionsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.response = data["response"];
            this.exception = data["exception"];
        }
    }

    static fromJS(data: any): GetRunGroupOpeningAttributionsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetRunGroupOpeningAttributionsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response;
        data["exception"] = this.exception;
        return data; 
    }
}

export interface IGetRunGroupOpeningAttributionsViewModel {
    response?: string | undefined;
    exception?: string | undefined;
}

export class GetSourcesViewModel implements IGetSourcesViewModel {
    json?: string | undefined;

    constructor(data?: IGetSourcesViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.json = data["json"];
        }
    }

    static fromJS(data: any): GetSourcesViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetSourcesViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["json"] = this.json;
        return data; 
    }
}

export interface IGetSourcesViewModel {
    json?: string | undefined;
}

export class GetEsgTypesViewModel implements IGetEsgTypesViewModel {
    json?: string | undefined;

    constructor(data?: IGetEsgTypesViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.json = data["json"];
        }
    }

    static fromJS(data: any): GetEsgTypesViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetEsgTypesViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["json"] = this.json;
        return data; 
    }
}

export interface IGetEsgTypesViewModel {
    json?: string | undefined;
}

export class GetMpgTypesViewModel implements IGetMpgTypesViewModel {
    json?: string | undefined;

    constructor(data?: IGetMpgTypesViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.json = data["json"];
        }
    }

    static fromJS(data: any): GetMpgTypesViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetMpgTypesViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["json"] = this.json;
        return data; 
    }
}

export interface IGetMpgTypesViewModel {
    json?: string | undefined;
}

export class GetProductsViewModel implements IGetProductsViewModel {
    json?: string | undefined;

    constructor(data?: IGetProductsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.json = data["json"];
        }
    }

    static fromJS(data: any): GetProductsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetProductsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["json"] = this.json;
        return data; 
    }
}

export interface IGetProductsViewModel {
    json?: string | undefined;
}

export class GetCountryRunTypesViewModel implements IGetCountryRunTypesViewModel {
    json?: string | undefined;

    constructor(data?: IGetCountryRunTypesViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.json = data["json"];
        }
    }

    static fromJS(data: any): GetCountryRunTypesViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetCountryRunTypesViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["json"] = this.json;
        return data; 
    }
}

export interface IGetCountryRunTypesViewModel {
    json?: string | undefined;
}

export class GetAttributionRunTypesViewModel implements IGetAttributionRunTypesViewModel {
    json?: string | undefined;

    constructor(data?: IGetAttributionRunTypesViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.json = data["json"];
        }
    }

    static fromJS(data: any): GetAttributionRunTypesViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetAttributionRunTypesViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["json"] = this.json;
        return data; 
    }
}

export interface IGetAttributionRunTypesViewModel {
    json?: string | undefined;
}

export class GetCountryUnitsViewModel implements IGetCountryUnitsViewModel {
    json?: string | undefined;

    constructor(data?: IGetCountryUnitsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.json = data["json"];
        }
    }

    static fromJS(data: any): GetCountryUnitsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetCountryUnitsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["json"] = this.json;
        return data; 
    }
}

export interface IGetCountryUnitsViewModel {
    json?: string | undefined;
}

export class GetCountryActionsViewModel implements IGetCountryActionsViewModel {
    json?: string | undefined;

    constructor(data?: IGetCountryActionsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.json = data["json"];
        }
    }

    static fromJS(data: any): GetCountryActionsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetCountryActionsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["json"] = this.json;
        return data; 
    }
}

export interface IGetCountryActionsViewModel {
    json?: string | undefined;
}

export class GetDataActionsViewModel implements IGetDataActionsViewModel {
    json?: string | undefined;

    constructor(data?: IGetDataActionsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.json = data["json"];
        }
    }

    static fromJS(data: any): GetDataActionsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetDataActionsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["json"] = this.json;
        return data; 
    }
}

export interface IGetDataActionsViewModel {
    json?: string | undefined;
}

export class GetEsgActionsViewModel implements IGetEsgActionsViewModel {
    json?: string | undefined;

    constructor(data?: IGetEsgActionsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.json = data["json"];
        }
    }

    static fromJS(data: any): GetEsgActionsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetEsgActionsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["json"] = this.json;
        return data; 
    }
}

export interface IGetEsgActionsViewModel {
    json?: string | undefined;
}

export class GetActionProgressViewModel implements IGetActionProgressViewModel {
    success?: string | undefined;
    exception?: string | undefined;

    constructor(data?: IGetActionProgressViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["success"];
            this.exception = data["exception"];
        }
    }

    static fromJS(data: any): GetActionProgressViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new GetActionProgressViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["exception"] = this.exception;
        return data; 
    }
}

export interface IGetActionProgressViewModel {
    success?: string | undefined;
    exception?: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}
